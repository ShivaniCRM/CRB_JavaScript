var CRB = CRB || {};
CRB.CRM = CRB.CRM || {};
CRB.CRM.PJ = CRB.CRM.PJ || {};
CRB.CRM.PJ.MonthlyMinimumFee = CRB.CRM.PJ.MonthlyMinimumFee || {};
CRB.CRM.PJ.MonthlyMinimumFee = {
	Attributes: {
		Fields: {
            name:"crb_name",
            productName:"crb_productname",
            pricingProposal:"crb_pricingproposal",
            RecurringMonthlyFee:"crb_recurringmonthlyfee" ,
            BeginningMonth:"crb_beginningmonth",
			EndMonth:"crb_endmonth"
		},
		Sections: {},
		Tabs: {},
		LOV: {}
	},
	onLoadOfMonthlyMinimumFee: function (executionContext) {
		var formContext = executionContext.getFormContext();
        this.makeFieldReadOnlyIfPricingProposalHasActiveSalesTask(executionContext);
        this.settingSoftDefaultValues(executionContext);
		
	},
	onSaveOfMonthlyMinimumFee: function (executionContext) {
		var formContext = executionContext.getFormContext();
        this.restrictSavingIfPricingProposalHasActiveSalesTask(executionContext);
		
    },
   settingSoftDefaultValues: async function (executionContext)
   {
        var formContext = executionContext.getFormContext();

        if (formContext.ui.getFormType() === 1 && formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue() !== null)
        {
        var value;
        var valueJson;
        
            await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 5").then((result)=>{
                value = result.entities[0]["crb_value"];
                valueJson = JSON.parse(value);
        })
        
        //Xrm.Utility.showProgressIndicator();
			if (formContext.getAttribute(this.Attributes.Fields.productName).getValue() === null)
			{
				var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue();
				if (pricingProposal != null)
				{
					await Xrm.WebApi.retrieveRecord(pricingProposal[0].entityType, pricingProposal[0].id, "?$select=_crb_productname_value").then((result) => {
						var productName = [
						{
							id: result["_crb_productname_value"],
							name: result["_crb_productname_value@OData.Community.Display.V1.FormattedValue"],
							entityType: result["_crb_productname_value@Microsoft.Dynamics.CRM.lookuplogicalname"]}]
						formContext.getAttribute(this.Attributes.Fields.name).setValue(result["_crb_productname_value@OData.Community.Display.V1.FormattedValue"]);
						formContext.getAttribute(this.Attributes.Fields.productName).setValue(productName);
					})
				}
			}
        //Xrm.Utility.closeProgressIndicator();
        if(formContext.getAttribute(this.Attributes.Fields.RecurringMonthlyFee).getValue() === null){
            formContext.getAttribute(this.Attributes.Fields.RecurringMonthlyFee).setValue(valueJson["RecurringMonthlyFee"]);
        }
        
        if(formContext.getAttribute(this.Attributes.Fields.BeginningMonth).getValue() === null){
            formContext.getAttribute(this.Attributes.Fields.BeginningMonth).setValue(valueJson["BeginningMonth"]);
        }

		if(formContext.getAttribute(this.Attributes.Fields.EndMonth).getValue() === null){
            formContext.getAttribute(this.Attributes.Fields.EndMonth).setValue(valueJson["EndMonth"]);
        }
        
        
        
      } // end of form type checking
    },
	makeFieldReadOnlyIfPricingProposalHasActiveSalesTask : async function(executionContext){

		//crb_ProgramFee_crb_pricingproposal_crb_pr
		//crb_pricingproposal_Tasks
		var formContext = executionContext.getFormContext();
		var programFeeID = formContext.data.entity.getId();
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue();
		if (pricingProposal !== null) {
			Xrm.Utility.showProgressIndicator();
			//await Xrm.WebApi.retrieveRecord("crb_task",programFeeID,"?$select=crb_approvalstatus,crb_approvaltype&$expand=crb_ProgramFee_crb_pricingproposal_crb_pr($expand=crb_pricingproposal_Tasks($select=crb_approvalstatus,crb_approvaltype&$filter=(crb_approvaltype eq 2 and crb_approvalstatus eq null))").then(
			await Xrm.WebApi.retrieveMultipleRecords("task", "?$select=crb_approvalstatus,crb_approvaltype&$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq '" + pricingProposal[0].id + "')").then(
				(results) => {
					Xrm.Utility.closeProgressIndicator();
					if (results.entities.length > 0) {
						Xrm.Navigation.openAlertDialog({ text: "There is Pending Task For the associated Pricing Proposal,  Please refrain from doing any changes", confirmButtonLabel: "OK" });
						formContext.ui.controls.forEach(function (control, i) {
							control.setDisabled(true);
						});
					}
				},
				(error) => {
					Xrm.Utility.closeProgressIndicator();
				}
			)
		}
	},
	restrictSavingIfPricingProposalHasActiveSalesTask: function (executionContext) {
		var results;
		var formContext = executionContext.getFormContext();
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue()[0].id.replace("{", "").replace("}", "");
		Xrm.Utility.showProgressIndicator();
		var req = new XMLHttpRequest();
		req.open("GET", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.2/tasks?$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq "+pricingProposal+")", false);
		req.setRequestHeader("OData-MaxVersion", "4.0");
		req.setRequestHeader("OData-Version", "4.0");
		req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
		req.setRequestHeader("Accept", "application/json");
		req.setRequestHeader("Prefer", "odata.include-annotations=*");
		req.onreadystatechange = function () {
			Xrm.Utility.closeProgressIndicator();
			if (this.readyState === 4) {
				req.onreadystatechange = null;
				if (this.status === 200) {
					results = JSON.parse(this.response);
				}
				else {
					console.log(this.responseText);
				}
			}
		};
		req.send();
		if (results.value.length > 0) {
			Xrm.Navigation.openAlertDialog({text: "There is Pending Task For the associated Pricing Proposal, Adding/Modifying record is not allowed now ", confirmButtonLabel: "OK"});
			executionContext.getEventArgs().preventDefault();
		}
	}
}
