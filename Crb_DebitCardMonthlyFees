var CRB = CRB || {};
CRB.CRM = CRB.CRM || {};
CRB.CRM.PJ = CRB.CRM.PJ || {};
CRB.CRM.PJ.DebitCardsMonthlyFees = CRB.CRM.PJ.DebitCardsMonthlyFees || {};
CRB.CRM.PJ.DebitCardsMonthlyFees = {
	Attributes: {
		Fields: {
			productName: "crb_productname",
            name: "crb_name",
            feesPercentOfMonthlyVolume: "crb_feespercentofmonthlyvolume",
            maxMonthlyTransactionVolume: "crb_maxmonthlytransactionvolume",
            minMonthlyTransactionVolume : "crb_minmonthlytransactionvolume",
            pricingProposal : "crb_pricingproposal"
		},
		Sections: {},
		Tabs: {},
		LOV: {
            lineOfBusiness: {
                BaaSCards: "BaaS/Cards",
                Marketplace_Lending: "Marketplace Lending",
                Payments: "Payments",
            },
            ProductNameLOV: {
                AchDomestic: "ACH Domestic",
                AchInternational: "ACH International",
                MerchantAcquiring: "Merchant Acquiring",
                PushToCard: "Push to Card",
                RTP: "RTP",
                FedNow: "FedNow",
                ConsumerSavingsAccount : "Consumer Savings Account",
                ConsumerCheckingAccount : "Consumer Checking Account",
                CommercialCheckingAccount :"Commercial Checking Account",
                CommercialSavingsAccount : "Commercial Savings Account"
            },
            Features:{
                DebitCard : "Debit Card",
                MobileDepositCapture : "Mobile Deposit Capture"
            }
        }
	},
	onLoadOfDebitCardsMonthlyFees: function (executionContext)
	{
        "use strict";
		var formContext = executionContext.getFormContext();
		this.showAndHideFields(executionContext);
        this.settingSoftDefaultValues(executionContext)
        this.makeFieldReadOnlyIfPricingProposalHasActiveSalesTask(executionContext);
	},
	onSaveOfDebitCardsMonthlyFees: function (executionContext)
	{
        "use strict";
		var formContext = executionContext.getFormContext();
        this.restrictSavingIfPricingProposalHasActiveSalesTask(executionContext);
	},
	showAndHideFields: async function (executionContext){
        "use strict";
		var formContext = executionContext.getFormContext();
        var lineofbusinessValue = "";
        var productnameValue = "";
        var feature = "";
        var pricingProposal =  formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue();
       
        if(pricingProposal === undefined){
            return;
        }

        var pricingProposalId = pricingProposal[0].id;
        if(pricingProposalId === null){
            return;
        }
        await Xrm.WebApi.retrieveRecord("crb_pricingproposal", pricingProposalId, "?$select=crb_pricingproposalid&$expand=crb_ProductToPricingProposalId($select=_crb_lineofbusiness_value,_crb_productname_value,_crb_features_value)").then(
            function success(result) {
                if (result.hasOwnProperty("crb_ProductToPricingProposalId") && result["crb_ProductToPricingProposalId"] !== null) {
                    lineofbusinessValue = result["crb_ProductToPricingProposalId"]["_crb_lineofbusiness_value@OData.Community.Display.V1.FormattedValue"];
                    productnameValue = result["crb_ProductToPricingProposalId"]["_crb_productname_value@OData.Community.Display.V1.FormattedValue"];
                    feature = result["crb_ProductToPricingProposalId"]["_crb_features_value@OData.Community.Display.V1.FormattedValue"];
                }
            },
            function(error) {
            }
        );
        
        if(lineofbusinessValue === this.Attributes.LOV.lineOfBusiness.BaaSCards){
            if(productnameValue === this.Attributes.LOV.ProductNameLOV.CommercialCheckingAccount || productnameValue === this.Attributes.LOV.ProductNameLOV.ConsumerCheckingAccount || productnameValue === this.Attributes.LOV.ProductNameLOV.ConsumerSavingsAccount || productnameValue === this.Attributes.LOV.ProductNameLOV.CommercialSavingsAccount){
                if(feature === this.Attributes.LOV.Features.DebitCard || feature === this.Attributes.LOV.Features.MobileDepositCapture ){
                    formContext.getControl(this.Attributes.Fields.productName).setVisible(true);
                    formContext.getControl(this.Attributes.Fields.feesPercentOfMonthlyVolume).setVisible(true);
                    formContext.getControl(this.Attributes.Fields.maxMonthlyTransactionVolume).setVisible(true);
                    formContext.getControl(this.Attributes.Fields.minMonthlyTransactionVolume).setVisible(true);
                    formContext.getControl(this.Attributes.Fields.feesPercentOfMonthlyVolume).setVisible(true);
                }
            }
        }
    },
    settingSoftDefaultValues: async function (executionContext){
        "use strict";
        var formContext = executionContext.getFormContext();

        if (formContext.ui.getFormType() === 1 && formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue() !== null)
        {
            var value;
            var valueJson;
            
            await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 13").then((result)=>{
                value = result.entities[0]["crb_value"];
                valueJson = JSON.parse(value);
            })

           
            if( formContext.getAttribute(this.Attributes.Fields.minMonthlyTransactionVolume).getValue()=== null){
                formContext.getAttribute(this.Attributes.Fields.minMonthlyTransactionVolume).setValue(valueJson["MinimumMonthlyTransactionVolume"]);
            }
            if( formContext.getAttribute(this.Attributes.Fields.maxMonthlyTransactionVolume).getValue()=== null){
                formContext.getAttribute(this.Attributes.Fields.maxMonthlyTransactionVolume).setValue(valueJson["MaximumMonthlyTransactionVolume"]);
            }
            if( formContext.getAttribute(this.Attributes.Fields.feesPercentOfMonthlyVolume).getValue()=== null){
                formContext.getAttribute(this.Attributes.Fields.feesPercentOfMonthlyVolume).setValue(valueJson["FeesPercentofVolume"]);
            }
             if (formContext.getAttribute(this.Attributes.Fields.productName).getValue() === null)
			{
				var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue();
				if (pricingProposal !== null)
				{
					await Xrm.WebApi.retrieveRecord(pricingProposal[0].entityType, pricingProposal[0].id, "?$select=_crb_productname_value").then((result) => {
						var productName = [
						{
							id: result["_crb_productname_value"],
							name: result["_crb_productname_value@OData.Community.Display.V1.FormattedValue"],
							entityType: result["_crb_productname_value@Microsoft.Dynamics.CRM.lookuplogicalname"]
                        }]
						formContext.getAttribute(this.Attributes.Fields.name).setValue(result["_crb_productname_value@OData.Community.Display.V1.FormattedValue"]);
						formContext.getAttribute(this.Attributes.Fields.productName).setValue(productName);
					})
				}
			}
      }
    },
    makeFieldReadOnlyIfPricingProposalHasActiveSalesTask : async function(executionContext){

		//crb_ProgramFee_crb_pricingproposal_crb_pr
		//crb_pricingproposal_Tasks
		var formContext = executionContext.getFormContext();
		var programFeeID = formContext.data.entity.getId();
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue();
		if (pricingProposal !== null) {
			Xrm.Utility.showProgressIndicator();
			//await Xrm.WebApi.retrieveRecord("crb_task",programFeeID,"?$select=crb_approvalstatus,crb_approvaltype&$expand=crb_ProgramFee_crb_pricingproposal_crb_pr($expand=crb_pricingproposal_Tasks($select=crb_approvalstatus,crb_approvaltype&$filter=(crb_approvaltype eq 2 and crb_approvalstatus eq null))").then(
			await Xrm.WebApi.retrieveMultipleRecords("task", "?$select=crb_approvalstatus,crb_approvaltype&$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq '" + pricingProposal[0].id + "')").then(
				(results) => {
					Xrm.Utility.closeProgressIndicator();
					if (results.entities.length > 0) {
						Xrm.Navigation.openAlertDialog({ text: "There is Pending Task For the associated Pricing Proposal,  Please refrain from doing any changes", confirmButtonLabel: "OK" });
						formContext.ui.controls.forEach(function (control, i) {
							control.setDisabled(true);
						});
					}
				},
				(error) => {
					Xrm.Utility.closeProgressIndicator();
				}
			)
		}	
		
	},
	restrictSavingIfPricingProposalHasActiveSalesTask: function (executionContext) {
		var results;
		var formContext = executionContext.getFormContext();
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.pricingProposal).getValue()[0].id.replace("{", "").replace("}", "");
		Xrm.Utility.showProgressIndicator();
		var req = new XMLHttpRequest();
		req.open("GET", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.2/tasks?$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq "+pricingProposal+")", false);
		req.setRequestHeader("OData-MaxVersion", "4.0");
		req.setRequestHeader("OData-Version", "4.0");
		req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
		req.setRequestHeader("Accept", "application/json");
		req.setRequestHeader("Prefer", "odata.include-annotations=*");
		req.onreadystatechange = function () {
			Xrm.Utility.closeProgressIndicator();
			if (this.readyState === 4) {
				req.onreadystatechange = null;
				if (this.status === 200) {
					results = JSON.parse(this.response);
				}
				else {
					console.log(this.responseText);
				}
			}
		};
		req.send();
		if (results.value.length > 0) {
			Xrm.Navigation.openAlertDialog({text: "There is Pending Task For the associated Pricing Proposal, Adding/Modifying record is not allowed now ", confirmButtonLabel: "OK"});
			executionContext.getEventArgs().preventDefault();
		}
	}
}
