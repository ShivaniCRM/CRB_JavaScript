var CRB = CRB || {};
CRB.CRM = CRB.CRM || {};
CRB.CRM.PJ = CRB.CRM.PJ || {};
CRB.CRM.PJ.PaymentTransactionVolume = CRB.CRM.PJ.PaymentTransactionVolume || {};
CRB.CRM.PJ.PaymentTransactionVolume = {
	Attributes: {
		Fields: {
			name: "crb_name",
			productName: "crb_productname",
			feeVolume: "crb_standardachfeevolume",
			laterSettlementWindowSurcharge: "crb_latersettlementwindowsurchargevolume",
			minimumTransactionVolume: "crb_mintransactionvolume",
			maximumTransactionVolume: "crb_maxtransactionvolume",
			feeVolume: "crb_standardachfeevolume",
			sameDayACHSurchargeVolume: "crb_samedayachsurchargevolume",
			risk: "crb_risk",
			PricingProposal: "crb_pricingproposal",
		},
		Sections: {
			paymentsTransferSponsorship: "sec_Payments_Transfer_Sponsorship",
			PaymentTransactionVolume: "Sec_Payment_Transaction_Volume",
		},
		Tabs: {
            General:"General",
        },
		LOV: {
			lineOfBusiness: {
				BaaSCards: "BaaS/Cards",
				Marketplace_Lending: "Marketplace Lending",
				Payments: "Payments",
			},
			ProductNameLOV: {
				AchDomestic: "ACH Domestic",
				AchInternational: "ACH International",
				MerchantAcquiring: "Merchant Acquiring",
				PushToCard: "Push to Card",
                Xpay: "Xpay",
			},
		}
	},
	onLoadOfPaymentTransactionVolume: function(executionContext) {
        "use strict";
		var formContext = executionContext.getFormContext();
		this.HiedandShowFieldsBasedOnProduct(executionContext);
        this.makeFieldReadOnlyIfPricingProposalHasActiveSalesTask(executionContext);
	},
	onSaveOfPaymentTransactionVolume: function(executionContext) {
        "use strict";
		var formContext = executionContext.getFormContext();
        this.restrictSavingIfPricingProposalHasActiveSalesTask(executionContext);
	},
	HiedandShowFieldsBasedOnProduct: async function(executionContext) {
		"use strict";
		var formContext = executionContext.getFormContext();
		var value;
		var valueJson;
		var crb_productname_formatted;
		var productName
        var sponsorshipType;
		await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 6").then((result) => {
			value = result.entities[0]["crb_value"];
			valueJson = JSON.parse(value);
		})
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.PricingProposal).getValue();
		if (pricingProposal != null) {
			await Xrm.WebApi.retrieveRecord("crb_pricingproposal", pricingProposal[0].id, "?$select=crb_pricingproposalid,_crb_productname_value,crb_sponsorshiptype").then(
				function success(result) {
					console.log(result);
                    sponsorshipType = result["crb_sponsorshiptype"]
					crb_productname_formatted = result["_crb_productname_value@OData.Community.Display.V1.FormattedValue"];
					productName = [{
						id: result["_crb_productname_value"],
						name: crb_productname_formatted,
						entityType: result["_crb_productname_value@Microsoft.Dynamics.CRM.lookuplogicalname"]
					}]

				},
				function(error) {
					console.log(error.message);
				}
			);
		}
		if (formContext.getAttribute(this.Attributes.Fields.productName).getValue() === null) {
			//alert(pricingProposal[0].id);
			if (formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).getValue() === null) {
				formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).setValue(valueJson["MinimumTransactionVolume"]);
			}
			if (formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).getValue() === null) {
				formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setValue(valueJson["MaximumTransactionVolume"]);
			}
			if (formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).getValue() === null) {
				formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setValue(valueJson["FeeVolume"]);
			}
			if (formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.sameDayACHSurchargeVolume).getValue() === null) {
				formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.sameDayACHSurchargeVolume).setValue(valueJson["SameDayACHSurchargeVolume"]);
			}
			if (formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.laterSettlementWindowSurcharge).getValue() === null) {
				formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.laterSettlementWindowSurcharge).setValue(valueJson["LaterSettlementWindowSurcharge"]);
			}
            if(crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.MerchantAcquiring && sponsorshipType === 1){
                formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setValue(valueJson["AcquiringPurchaseSponsorshipMaximumTransactionVolume"]);
                formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setValue(valueJson["AcquiringPurchaseSponsorshipFeeVolume"]);
            }
			formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.name).setValue(crb_productname_formatted);
			formContext.getAttribute(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.productName).setValue(productName);

		}
		if (crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.AchDomestic) {
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.productName).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.sameDayACHSurchargeVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.laterSettlementWindowSurcharge).setVisible(true);
		}
		if (crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.Xpay || crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.PushToCard || crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.AchInternational) {
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.productName).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setVisible(true);
		}
        if (crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.MerchantAcquiring && sponsorshipType !== null && sponsorshipType === 1) {
            formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.productName).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setVisible(true);
         }
            
        if (crb_productname_formatted === CRB.CRM.PJ.PaymentTransactionVolume.Attributes.LOV.ProductNameLOV.MerchantAcquiring && sponsorshipType !== null && sponsorshipType === 2) {
            formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.productName).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.minimumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.maximumTransactionVolume).setVisible(true);
			formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.feeVolume).setVisible(true);
            formContext.getControl(CRB.CRM.PJ.PaymentTransactionVolume.Attributes.Fields.risk).setVisible(true);
            //formContext.ui.tabs.get(this.Attributes.Tabs.General).sections.get(this.Attributes.Sections.paymentsTransferSponsorship).setVisible(true);
        }
	},
    makeFieldReadOnlyIfPricingProposalHasActiveSalesTask: async function (executionContext) {

	//crb_ProgramFee_crb_pricingproposal_crb_pr
	//crb_pricingproposal_Tasks
	var formContext = executionContext.getFormContext();
	var programFeeID = formContext.data.entity.getId();
	var pricingProposal = formContext.getAttribute(this.Attributes.Fields.PricingProposal).getValue();
	Xrm.Utility.showProgressIndicator();
	//await Xrm.WebApi.retrieveRecord("crb_task",programFeeID,"?$select=crb_approvalstatus,crb_approvaltype&$expand=crb_ProgramFee_crb_pricingproposal_crb_pr($expand=crb_pricingproposal_Tasks($select=crb_approvalstatus,crb_approvaltype&$filter=(crb_approvaltype eq 2 and crb_approvalstatus eq null))").then(
	await Xrm.WebApi.retrieveMultipleRecords("task", "?$select=crb_approvalstatus,crb_approvaltype&$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq '" + pricingProposal[0].id + "')").then(
		(results) => {
			Xrm.Utility.closeProgressIndicator();
			if (results.entities.length > 0) {
				Xrm.Navigation.openAlertDialog({ text: "There is Pending Task For the associated Pricing Proposal,  Please refrain from doing any changes", confirmButtonLabel: "OK" });
				formContext.ui.controls.forEach(function (control, i) {
					control.setDisabled(true);
				});
			}
		},
		(error) => {
			Xrm.Utility.closeProgressIndicator();
		}
	)

},
restrictSavingIfPricingProposalHasActiveSalesTask: function (executionContext) {
		var results;
		var formContext = executionContext.getFormContext();
		var pricingProposal = formContext.getAttribute(this.Attributes.Fields.PricingProposal).getValue()[0].id.replace("{", "").replace("}", "");
		Xrm.Utility.showProgressIndicator();
		var req = new XMLHttpRequest();
		req.open("GET", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.2/tasks?$filter=((crb_approvaltype eq 1 or crb_approvaltype eq 2) and crb_approvalstatus eq null and _regardingobjectid_value eq "+pricingProposal+")", false);
		req.setRequestHeader("OData-MaxVersion", "4.0");
		req.setRequestHeader("OData-Version", "4.0");
		req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
		req.setRequestHeader("Accept", "application/json");
		req.setRequestHeader("Prefer", "odata.include-annotations=*");
		req.onreadystatechange = function () {
			Xrm.Utility.closeProgressIndicator();
			if (this.readyState === 4) {
				req.onreadystatechange = null;
				if (this.status === 200) {
					results = JSON.parse(this.response);
				}
				else {
					console.log(this.responseText);
				}
			}
		};
		req.send();
		if (results.value.length > 0) {
			Xrm.Navigation.openAlertDialog({text: "There is Pending Task For the associated Pricing Proposal, Adding/Modifying record is not allowed now ", confirmButtonLabel: "OK"});
			executionContext.getEventArgs().preventDefault();
		}
	}
}
