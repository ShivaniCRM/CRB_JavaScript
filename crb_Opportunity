// JavaScript source code
var CRB = CRB || {};
CRB.CRM = CRB.CRM || {};
CRB.CRM.PJ = CRB.CRM.PJ || {};
CRB.CRM.PJ.Opportunity = CRB.CRM.PJ.Opportunity || {};
CRB.CRM.PJ.Opportunity = {
    Attributes: {
        Opportunity: {
            OpportunityID: "crb_opportunityid",
            Topic: "crb_opportunitytopic",
            owner: "ownerid",
            Status: "crb_status",
            SubStatus: "crb_substatus",
            BPFStage: "crb_bpfstage",
            OpportunityType: "crb_opportunitytype",
            TargetGoLiveDate: "crb_targetgolivedate",
            GoLiveDate: "crb_golivedate",
            ProjectedRevenueYear1: "crb_projectedrevenueyear1",
            ProjectedRevenueYear2: "crb_projectedrevenueyear2",
            ProjectedRevenueYear3: "crb_projectedrevenueyear3",
            ProjectedRevenueTotal: "crb_projectedrevenuetotal",
            PartnerName: "crb_partnername",
            BusinessDevelopmentRepresentativeFullName: "crb_businessfullname",
            ApprovalStatus: "crb_approvalstatus",
            ApprovedBy: "crb_approvedby",
            Comment: "crb_comment",
            PricingProposalStatus: "crb_pricingproposalstatus",
            iddstatus: "crb_iddstatus",
            setpreonboarding : "crb_setpreonboarding",
            bdComment:"crb_bdcomment",
            isgddleadowner: "crb_isgddleadowner",
            Onboarding: "crb_onboarding",
            //Phase3
            ExSupportAnotherProgram :"crb_exclusivelysupportanotherprogramnew",
            ExistingSupportProgram:"crb_existingsupportedprogramnew",
            terminationdatelost: "crb_terminationdatelost",
            terminationdatedecline: "crb_terminationdatedecline",
            signedcontractdate: "crb_signedcontractdate",
            golivedate: "crb_golivedate",
            status: "crb_subopportunitystatus",
            close: "crb_close",
            closePreOnboarding: "crb_closepreonboarding",
            isChildPartner: "crb_ischildpartneropportunity",
            termsheetsigneddate: "crb_termsheetsigneddate",
            committeeapprovaldatecompletion: "crb_committeeapprovaldatecompletion",
            headerSubStatus: "header_crb_substatus",
            Clonebutton:"crb_clonebuttonnew",
            Clonebuttonsubgrid:"crb_subgridclonebuttonnew",
            Statuss: "crb_statustab",
            TerminationReasonNew: "crb_terminationreasonstatustab",
            TerminationRequestedBy: "crb_terminationrequesteddecline",
            IsMeedtingdateFromPreOnboarding: "crb_ispreonboardingmeetingdatethere",
            PaymentandBaaSProducy: "crb_ispaymentorbaasproductthere",
            programOneTimeFee: "crb_programonetimefee",
            programFeeDiscount: "crb_programdiscountfee",
            adHocReportingFee: "crb_adhocreportingfee",
            TerminationDateStatusTab: "crb_terminationdatestatustab",
            TerminationRequesteByStatusTab: "crb_terminationrequestedbystatustab",
            CloneOpportunityGUIDNew:"crb_cloneopportunityguidnew",
            OpportunityTopic:"name",
            alphaTestingStartDate: "crb_alphatestingstartdatecompletion",
            alphaTestingEndDate: "crb_alphatestingenddatecompletion",
            betatestingStartDate: "crb_betatestingstartdatecompletion",
            betatestingEndDate: "crb_betatestingenddatecompletion",
            statustabfieldsmodifiedopportunity: "crb_statustabfieldsmodifiedopportunity",
            terminationdescriptiondecline: "crb_terminationdescriptiondecline",
            opportunitysfidtext:"crb_opportunityidsftext",
            stagesf:"crb_stagesf",
            CloseNew: "crb_closenew",
            GenerateTermSheet: "crb_generatetermsheet",
            OpportunityName: "name",
            programOneTimeFee: "crb_programonetimefee",
            programFeeDiscount: "crb_programdiscountfee",
            adHocReportingFee: "crb_adhocreportingfee",
            partnerId: "parentaccountid",
            partnerAddress: "crb_partneraddress",
            BaasProductList: "crb_baascardsproductlist",
            stageName: "crb_stagename",
            PaymentProductList: "crb_paymentproductlist",
            Source: "crb_source",
            Broker: "parentcontactid",
            ActionTakenDate: "crb_actiontakendate",
            ActionTaken: "crb_other_disposition_category",  //OtherDispositionCategory
            ProjectedClosedDate: "crb_projected_close_date",
            ApplicationDate: "crb_application_date",
            CloseDate: "crb_closedate",
            OpportunityLostReasons: "crb_opportunity_lost_reasons",
            LostorPassReasonComments : "crb_lost_pass_reason_comments",
            GainOnSalein$: "crb_gain_on_sale",
            ValuationAllowanceRelease: "crb_valuation_allowance_release",
            Price: "crb_price",
            Cost: "crb_cost",
            PrincipalBalance: "crb_principal_balance",
            CollateralBalance: "crb_collateral_balance",
            NetProceeds: "crb_net_proceeds",
            NetExecution: "crb_net_execution",
            AccruedInterest: "crb_accrued_interest",
            CollatAndAccrued: "crb_collat_accrued",
            GrossExecution: "crb_gross_execution",
            GrossProceeds: "crb_gross_proceeds",
            MarkToFMV: "crb_mark_to_fmv",
            HFS: "crb_hfs",
            LocomPrice: "crb_locom_price",
            FMV: "crb_fmv",
            GainOnSale: "crb_gain_on_sales",
            NetExecutionOverpar: "crb_net_execution_over_par",
            PeerIQFeeRate: "crb_peeriq_fees_rate",
            PeerIQSituation: "crb_peeriq_situation",
            EstimatedPIQFee: "crb_estimated_piq_fees",ClosingWiretoCRB: "crb_closing_wire_to_crb",
            TrueUPsNetted: "crb_true_ups_netted",
            RetentionFromSecuritizations: "crb_retention_from_securitizations",
            NetExecutionExAccruedinterest: "crb_net_execution_ex_accrued_interest",
            WeightedExAccruedInterest: "crb_weight_ex_accrued_interest",
            T20: "crb_t_20",
            T3: "crb_t_3",
            CeclImpact$: "crb_cecl_impact_amt",
            CeclImpact: "crb_cecl_impact",
            InitialDueDiligenceCompleted: "crb_initial_due_diligence_completed",
            CorporateDeck: "crb_corporate_deck",
            CorporateFinancialModel: "crb_corporate_financial_model",
            AuditedUnauditedFinancials: "crb_audited_unaudited_financials",
            AssetTape: "crb_asset_tape",
            HistoricalAssetPerformanceSummary: "crb_historical_asset_performance_summary",
            CompanysProjectionsSummary: "crb_company_s_projections_summary",
            UnderwritingAndPricingGuidelines: "crb_underwriting_and_pricing_guidelines",
            ServicingGuidelines: "crb_servicing_guidelines",
            SampleCustomerAgreement: "crb_sample_customer_agreement",
            InitialDiligence: "crb_initial_diligence",
            WeightedAmount: "crb_weighted_amount",
            Amount: "crb_amount",
            Probability: "closeprobability",
            NetInterestMargin: "crb_net_interest_margin",
            ROE: "crb_roe",
            NetIneterestMarginPercent: "crb_net_interest_margin_pct",
            AvgCapitalDeployed: "crb_avg_capital_deployed",
            ProbabilityWeightedNIM: "crb_probability_weighted_nim",
            PrimePercent: "crb_prime_percent",
            MaddenPercent: "crb_madden_percent",
            SubPlatformPercent3: "crb_subplatform3_percent",
            SubPlatformPercent4: "crb_subplatform4_percent",
            SubPlatformPercent5: "crb_subplatform5_percent",
            SubplatformPercent6: "crb_subplatform6_percent",
            Platform: "crb_platform",
            ProspectDate: "crb_prospect_date",
            AssessmentDate: "crb_assessment_date",
            BusinessType: "crb_business_type",
            Priority: "crb_priority",
            ContractStatus: "crb_contract_status",
            AssesmentDate: "crb_assessment_date",
            NegotiationDate: "crb_negotiation_date",
            OnboardingDate: "crb_onboarding_date",
            CompletionDate: "crb_completion_date",
            ProspectDate: "crb_prospect_date",
            Application: "crb_application",
            UnderwritingDate: "crb_underwriting",
            InClosingDate: "crb_in_closing",
            BusinessDevelopmentDate: "crb_business_development",
            InvestmentTeamDate: "crb_investment_team_date",
            TermSheetDate: "crb_term_sheet_date",
            TermSheetExecutedDate: "crb_term_sheet_executed_date",
            LastStageUpdateDate: "crb_last_stage_update",
            OpportunityCloseDate: "crb_opportunity_close_date",
            ProspectAge: "crb_prospect_age",
            BusinessDevelopmentAge: "crb_business_development_age",
            InvestmentTeamAge: "crb_investment_team_age",
            TermSheetAge: "crb_term_sheet_stage_age",
            TermSheetExecutedAge: "crb_term_sheet_executed_age",
            DaysInCurrentStage: "crb_days_in_current_stage",
            AssessmentAge: "crb_assessment_age",
            NegatiationAge: "crb_negotiation_age",
            OnboardingAge: "crb_onboarding_age",
            CompletionAge: "crb_completion_age",
            CurrentStageAge: "crb_current_stage_age",
            LastActivityModifiedDate: "crb_last_activity_modified_date",
        },
        LOV:{
            Status: {
                NotStarted: 1,
                InProgress: 2,
                Complete: 3,
                ClosedLost:4,
                ClosedDecline:5,
                ClosedWon: 6,
            },
            StatusTabStatus: {
                Active: 100000000,
                Inactive: 100000001,
                Pending: 100000002,
                PendingTermination: 100000003,
                SuspendedActivity: 100000004,
            },
            Source: {
                Broker: 37,
            },
            StageSF:{
                New: 1,
                Prospect: 2,
                Assessment: 3,
                BusinessDevelopment: 4,
                PreliminaryRiskPricingAndRevenue: 5,
                DocumentsSent: 6,
                Application: 7,
                Negotiation: 8,
                Discovery: 9,
                InitialDiscussion: 10,
                DueDiligenceRiskComplianceAML: 11,
                DocumentsReceived: 12,
                InvestmentTeam: 13,
                Onboarding: 14,
                Underwriting: 15,
                Diligence: 16,
                Evaluation: 17,
                CommitteeOrBoardApproval: 18,
                DueDiligenceReview: 19,
                TermSheet: 20,
                DueDiligenceLegal: 21,
                TermSheetExecuted: 22,
                TechnicalAndLegalCompletion: 23,
                InClosing: 24,
                Approval: 25,
                Completion: 26,
                ProjectExecutionFinalization: 27,
                AccountOpened: 28,
                DealLost: 29,
                ClosedWon: 30,
                ClosedLost: 31,
                Lost: 32,
                CRBPass: 33,
                ClosedDecline: 34,
                Funded: 35,
                OtherDisposition: 36,
                Closed: 37,
            },
            ActionTaken: {
                Closed: 10,
            },
            SetNetExecutionOverParValues: {
                Over: "Over",
                Par: "Par",
                Under: "Under"
            },
            PeerIQSituations: {
                PeerIQIsUsedAndNoMajorHiccups: 1,
                PeerIQIsUsedHoweverThereAreMajorHiccups: 2,
                PeerIQIsNotUsed: 3,
            },
            BusinessType: {
                New: 1,
                Renewal: 2,
                Upsell: 3,
                InitialPurchase: 4,
                RecurringBusiness: 5,
            },
            Platform: {
                AboveAverage: 1,
                Avg: 2,
                BelowAvg: 3,
                BorrowersFirst: 4,
                Bread: 5,
                CRE: 6,
                FFAM: 7,
                FreedomCplus: 8,
                FreedomFplus: 9,
                LendingClub: 10,
                LoanDepot: 11,
                Marlette: 12,
                NCA: 13,
                Rockloans: 14,
                RockloansHI: 15,
                SunlightHI: 16,
                SunlightSolar: 17,
                Upgarde: 18,
                Upstart: 19,
            },
            Source: {
                Broker: 37,
                Direct: 38,
                CDCorRBAC: 39,
            },
            Priority: {
                Low: 100000002,
                Medium: 100000003,
                High: 100000001,
            },
            ContractStatus: {
                NDARequested: 18,
                NDASubmittedtoLegal: 19,
                NDAexecuted: 20,
                ContractDetailsPendingClient: 22,
                ContractRequestedinLawVu: 23,
                ContractRoutedtoClient: 27,
                ContractSigned: 28
            },
        },
    },
    TabName: {
        OpportunityTeam: "Opportunity Team",
        Intake: "Intake",
        Products: "Products",
        Projection: "Projection",
        PricingProposal: "Pricing Proposal",
        Initialduediligence: "Initial Due Diligence",
        OnboardingApproval: "Onboarding Approval",
        Documents: "Documents",
        TermSheet: "Term Sheet",
        FeePayment: "Fee Payment",
        DueDiligence: "Due-Diligence",
        ClosedLost: "Closed_Lost",
        ClosedDecline: "Closed_Decline",
        completion:"Completion",
        ClosedWon: "ClosedWon",
        StatusTab: "Status",
        OpportunityInformation: "Opportunity Information",
        LegacyOpportunity: "LegacyOpportunity",
        ETBOpportunityInformation: "ETBOpportunityInformation",
        Details: "Details",
    },
    Section: {
        OpportunityTeam: "Opportunity_Team",
        Intake: "Intake",
        Products: "Products",
        Projections: "Product_and_projections",
        PricingProposal: "Pricing",
        Initialduediligence: "Initial_due_diligence",
        OnboardingApproval: "Onboarding_Approval",
        Documents: "Documents",
        TermSheet: "Term_Sheet",
        FeePayment: "Fee_Payment",
        ThirdParty: "ThirdParty",
    },
     ListOfValues: {
        ApprovalStatus: {
            Approve: 1,
            Reject: 2
        },
        ExSuppAnotherProgram: {
            Yes:1,
            No:0
         }
            
    },
    BPFIds:{
        CRBPartnerOnboarding: "522C128F-49DC-EE11-904C-000D3A4F7357",
        CRBPartnerOnboardingMigration: "D70717B5-B1CD-EF11-B8E8-6045BDD3FB9A",
        CapitalMarkets: "D5AA62D5-64E8-EF11-8EE9-7C1E520BB0AC",
        DigitalBanking: "8DA17D72-66E8-EF11-8EEA-7C1E520CEFDB",
        SBALending: "D152FB0A-68E8-EF11-8EEA-7C1E520CEFDB",
        SDL: "1309D03A-69E8-EF11-8EEA-7C1E520CEFDB",
    },
    BPFStages:{
        Prospect: "Prospect",
        BusinessDevelopment: "Business Development",
        InvestmentTeam: "Investment Team",
        TermSheet: "Term Sheet",
        TermSheetExecuted: "Term Sheet Executed",
        Application: "Application",
        Underwriting: "Underwriting",
        InClosing: "In Closing",
        Assessment: "Assessment",
        Negotiation: "Negotiation",
        Onboarding: "Onboarding",
        Completion: "Completion",
        ClosedWon: "Closed Won",
        ClosedLost: "Closed Lost",
        ClosedDecline: "Closed Decline",
        Funded: "Funded",
        OtherDisposition: "Other Disposition",
    },
    FormIds:{
        CRBOpportunity: "72A6C625-51DC-EE11-904C-000D3A1C40A7",
        CapitalMarkets: "7F23F9FD-64E8-EF11-8EEA-7C1E520CEFDB",
        DigitalBanking: "269DBF08-65E8-EF11-8EE9-7C1E520BB0AC",
        SBALending: "36EF4F34-63E8-EF11-8EE9-7C1E520BB0AC",
        SDL: "D4C6AF65-65E8-EF11-9341-7C1E52485BCF",
        SFOpportunities: "29966223-EF6B-4056-B85C-E19F0FB5D771",
    },
    FormName: {
        CRBOpportunity: "CRB Opportunity",
        DigitalBanking: "Digital Banking",
        CapitalMarkets: "Capital Markets",
        SBALending: "SBA Lending",        
        SDL: "SDL",
        SFOpportunity: "SF Opportunities",        
    },
    ETBBPFStageLabels:{
        Assessment: "Assessment",
        Negotiation: "Negotiation",
        Onboarding: "Onboarding",
        Completion: "Completion",
        ClosedWon: "Closed Won",
        ClosedLost: "Closed Lost",
        ClosedDecline: "Closed Decline",
    },
    FormType: {
        CreateForm: 1,
        UpdateForm: 2,
        ReadOnlyForm: 3
    },
    localVariables:{
        isAutoBPFJump:false, //is being used in ETB process
    },
    FormType: {
        CreateForm: 1,
        UpdateForm: 2,
        ReadOnlyForm: 3
    },
    onLoadOfOpportunity: function (executionContext) { 
        "use strict";
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        this.verifyCriteria(executionContext);
//        var isMigratedRecord =await this.checkForMigratedRecord(executionContext);
//        if(isMigratedRecord){
//            return;
//        }
        //await this.checkAndSetClassicBPF(executionContext);
        this.registerOnChangeEvents(executionContext);
        this.tabHiding(executionContext);
        this.updateFlagFiledstoTrue(executionContext);
        this.settingPPSoftDefaultValues(executionContext);
        //SUthis.SetvalueForStatusonStatusTab(executionContext);
        formContext.data.process.addOnPreStageChange(CRB.CRM.PJ.Opportunity.BpfSTageNextButton);
        formContext.data.process.addOnStageChange(CRB.CRM.PJ.Opportunity.onBPFStageChange);
        formContext.data.process.addOnPreStageChange(CRB.CRM.PJ.Opportunity.showAlertonPreonboardingToOnboarding);
        this.makeOpporunityTopicEditableForCloneOpportunity(executionContext);
//this.BpfSTageNextButton(executionContext);
        //this.toggleNewButtonBasedOnTeamMembership(executionContext);
        //this.toggleSubgridAddButtonVisibility(subgridName, isVisible);
        //this.onStatuschange(executionContext);
        this.onStageChange(executionContext);
        //this.SetOptyStatus(executionContext); 
	
        this.Updatepricingproposalstatus(executionContext);
        //this.OPTYStatusInpgogressWhenTermSheetIsSent(executionContext);
        this.onBPFStageChange(executionContext);
        //this.hidingofSubstatus(executionContext);  
        this.settingPPSoftDefaultValues(executionContext);
        this.SetPartnerAddressAndBaasProductNames(executionContext);
        this.SetPayemtProductList(executionContext);      
        this.setIsOwnerGDDLead(executionContext);
        this.hideCreateButtonForStage1(executionContext);
        this.hidingofIDDTab(executionContext);
        formContext.data.process.addOnStageChange(this.hidingofIDDTab);
        this.ShowAndHideCloseLostandDeclineTab(executionContext);
        formContext.data.process.addOnStageChange(this.ShowAndHideCloseLostandDeclineTab);
        this.showhidefieldinoppurtunity(executionContext);
        this.ShowAndHideCloseFieldOnTheBasisofBPFStage(executionContext);
        this.redirectToChildPartnerForm(executionContext);  
        //this.SetvalueForStatusonStatusTab(executionContext);
        this.ShowHideFieldsOnStatusTab(executionContext);    
        formContext.data.process.addOnStageChange(this.ShowAndHideCloseFieldOnTheBasisofBPFStage);
        
        formContext.data.process.addOnStageChange(this.populateTerminationDate);
        formContext.data.process.addOnPreStageChange(this.AlertOnStageClosedWon);
        this.MandatoryFieldsOnStatusTab(executionContext);
        formContext.data.process.addOnStageChange(this.MandatoryFieldsOnStatusTab);
        
      
    },
    onLoadOfCapitalMarket: function (executionContext){
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        var stageSFLOV = this.Attributes.LOV.StageSF;
        var sequenceOfBPFStages = {
            "Diligence": 1,
            "Closed Won": 2,
            "Closed Lost": 2,
            "Closed Decline": 2,
        }
        var capitalMarketOptions = [stageSFLOV.Diligence,stageSFLOV.ClosedWon]; //,stageSFLOV.ClosedLost,stageSFLOV.ClosedDecline
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        this.autoMoveBPF(executionContext, sequenceOfBPFStages);
        //this.filterStageSFOptions(executionContext, capitalMarketOptions);
        this.setStageSFOptionsBasedOnClose(executionContext, capitalMarketOptions);
        this.showandHideLostOpportunityFieldsCapitalMarket(executionContext);
        formContext.data.process.addOnStageChange(this.showandHideLostOpportunityFieldsCapitalMarket);
        this.calculateGainOnSale$AndValuationAllowanceRelease$(executionContext);
        this.updateNetProceedsAndCollatandAccrued(executionContext);
        this.registerOnChangeEventsforCapitalMarket(executionContext);
        this.calculateEstimatedPIQFees(executionContext);
        this.calculatePeerIQFeesRate(executionContext);
        this.calculateGainonSalesAndNetExecutionOverPar(executionContext);
        this.calculateLoComPrice(executionContext);
        this.calculateMarkToFMV(executionContext);
        this.calculateGrossExecution(executionContext);
        this.calculatePeerIQFeesRate(executionContext);
        this.calculateEstimatedPIQFees(executionContext);
        this.calculateClosingWireToCRB(executionContext);
        this.calculateNetExecutionexAccruedInterest(executionContext);
        this.calculateWeightExAccruedInterest(executionContext);
        this.calculateTplus3AndTplus20(executionContext);
        this.filterOptionSetsBasedonLOB(executionContext);
        formContext.data.entity.addOnSave(this.calculateCECLImpact$);
        //formContext.data.entity.addOnSave(this.validateSubPlatformOnCapitalMarkets); // fields mentioned in this function are missing in form
        
        formContext.data.process.addOnStageChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFField(formContext);
            this.setBPFStageField(formContext);
            this.setCloseToDefault(formContext);
            this.setStageSFOptionsBasedOnClose(executionContext, capitalMarketOptions);
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.stagesf).addOnChange((executionContext)=>{
            this.autoMoveBPF(executionContext, sequenceOfBPFStages);
            this.setCloseToDefault(formContext);    // this function will check stage and then set default value
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.CloseNew).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFOptionsBasedOnClose(executionContext, capitalMarketOptions);
            this.setStageSfBasedOnClose(executionContext);
        });
    },
    onLoadOfDigitalBanking: function (executionContext){
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        var stageSFLOV = this.Attributes.LOV.StageSF;
        var sequenceOfBPFStages = {
            "Assessment": 1,
            "Negotiation": 2,
            "Onboarding": 3,
            "Completion": 4,
            "Closed Won": 5,
            "Closed Lost": 5,
            "Closed Decline": 5,
        }
        var digitalBankingOptions = [stageSFLOV.Assessment,stageSFLOV.Negotiation,stageSFLOV.Onboarding,stageSFLOV.Completion,stageSFLOV.ClosedWon]; //,stageSFLOV.ClosedLost,stageSFLOV.ClosedDecline
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        this.autoMoveBPF(executionContext, sequenceOfBPFStages);
        //this.filterStageSFOptions(executionContext, digitalBankingOptions);
        this.setStageSFOptionsBasedOnClose(executionContext, digitalBankingOptions);
        
        formContext.data.process.addOnStageChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFField(formContext);
            this.setBPFStageField(formContext);
            this.setCloseToDefault(formContext);
            this.setStageSFOptionsBasedOnClose(executionContext, digitalBankingOptions);
            
            this.populateDatesBasedOnCurrentStageDigitalBanking(executionContext);
            this.updateLastStageDateDigitalBanking(executionContext);
            this.calculateAgesofStagesDigitalBanking(executionContext);
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.stagesf).addOnChange((executionContext)=>{
            this.autoMoveBPF(executionContext, sequenceOfBPFStages);
            this.setCloseToDefault(formContext);    // this function will check stage and then set default value
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.CloseNew).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFOptionsBasedOnClose(executionContext, digitalBankingOptions);
            this.setStageSfBasedOnClose(executionContext);
        });
        this.setCurrentDateforFirstStage(executionContext);
        this.filterOptionSetsBasedonLOB(executionContext);
    },
    onLoadOfSBALending: function (executionContext){
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        var stageSFLOV = this.Attributes.LOV.StageSF;
        var sequenceOfBPFStages = {
            "Prospect": 1,
            "Application": 2,
            "Underwriting": 3,
            "In Closing": 4,
            "Funded": 5,
            "Other Disposition": 5,
        }
        //var sbaLendingOptions = [stageSFLOV.Prospect,stageSFLOV.Application,stageSFLOV.Underwriting,stageSFLOV.InClosing,stageSFLOV.Funded,stageSFLOV.OtherDisposition];
        
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        this.autoMoveBPF(executionContext, sequenceOfBPFStages);
        this.enableAndDisableThirdPartySection(executionContext);
        this.makeBrokerFieldMandatory(executionContext);
        //this.filterStageSFOptions(executionContext, sbaLendingOptions);
        this.setSBALendingStageSFOptionsBasedOnStatus(executionContext);
        this.setStatusBasedOnBPFStage(executionContext);
        this.showHideProjectedCloseDate(executionContext);
        this.registerOnChangeEventsforSBALending(executionContext);
        this.filterOptionSetsBasedonLOB(executionContext);
        formContext.data.process.addOnStageChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFField(formContext);
            this.setBPFStageField(formContext);
            this.setStatusBasedOnBPFStage(executionContext);
            this.setOpenCloseStatusBasedOnBPFStage(executionContext);
            
                       
            //this.populateDatesBasedOnCurrentStageforSBALending(executionContext); //this section has been removed from SBA Lending Form
            this.updateLastActivityModifiedSBALending(executionContext);
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.stagesf).addOnChange((executionContext)=>{
            this.autoMoveBPF(executionContext, sequenceOfBPFStages);
            this.setClosedInActionTaken(executionContext);

        });
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.Status).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setSBALendingStageSFOptionsBasedOnStatus(executionContext);
        });  
    },
    onLoadOfSDL: function (executionContext){
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        var stageSFLOV = this.Attributes.LOV.StageSF;
        var sequenceOfBPFStages = {
            "Prospect": 1,
            "Business Development": 2,
            "Investment Team": 3,
            "Term Sheet": 4,
            "Term Sheet Executed": 5,
            "Closed Won": 6,
            "Closed Lost": 6,
            "Closed Decline": 6,
        }
        var sdlOptions = [stageSFLOV.Prospect,stageSFLOV.BusinessDevelopment, stageSFLOV.InvestmentTeam, stageSFLOV.TermSheet, stageSFLOV.TermSheetExecuted, stageSFLOV.ClosedWon];   //, stageSFLOV.ClosedLost, stageSFLOV.ClosedDecline
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        this.autoMoveBPF(executionContext, sequenceOfBPFStages);
        //this.filterStageSFOptions(executionContext, sdlOptions);
        this.setStageSFOptionsBasedOnClose(executionContext, sdlOptions);
        this.filterOptionSetsBasedonLOB(executionContext);
        formContext.data.process.addOnStageChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFField(formContext);
            this.setBPFStageField(formContext);
            this.setCloseToDefault(formContext);
            this.setStageSFOptionsBasedOnClose(executionContext, sdlOptions);
            
            this.populateDatesBasedOnCurrentStageSDL(executionContext);
            this.updateLastStageDate(executionContext);
            this.calculateAgesofStages(executionContext);
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.stagesf).addOnChange((executionContext)=>{
            this.autoMoveBPF(executionContext, sequenceOfBPFStages);
            this.setCloseToDefault(formContext);    // this function will check stage and then set default value
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.CloseNew).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            this.setStageSFOptionsBasedOnClose(executionContext, sdlOptions);
            this.setStageSfBasedOnClose(executionContext);
        });
        this.calculateInitialDiligence(executionContext);
        this.calculateInitialDueDiligenceCompleted(executionContext);
        this.calculateNetInterestMarginAndROE(executionContext);
        this.calculateWeightedAmount(executionContext);
        this.calculateProbabilityWeightedNIM(executionContext);
        this.setCurrentDateforFirstStage(executionContext);
        this.registerOnchangeEventsforSDL(executionContext);
        formContext.data.process.addOnStageChange(this.calculateProbabilityWeightedNIM);
        formContext.data.process.addOnStageChange(this.calculateWeightedAmount);
    },
    onLoadOfSFOpportunities: function (executionContext){
        var formContext = executionContext.getFormContext();
        this.loadDataFromCommonJS(executionContext);
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        this.checkFor3LOBMigratedRecord(executionContext);
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
    },
    verifyCriteria(executionContext){
        var formContext = executionContext.getFormContext();
        this.loadBPFDynamically(executionContext);
        this.setFormBasedOnOpportunityType(executionContext);
        
        formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            formContext.data.save()
            .then(()=>{
                this.loadBPFDynamically(executionContext);
                this.setFormBasedOnOpportunityType(executionContext);
            })
            .catch(()=>{
                
            });
        });
    },
    checkFor3LOBMigratedRecord: function(executionContext){
        var formContext = executionContext.getFormContext();
        var opportunitySFIdText = formContext.getAttribute(this.Attributes.Opportunity.opportunitysfidtext).getValue();
        var _3LOBs = [this.Attributes.LOV.lineOfBusiness.BaaSCards,this.Attributes.LOV.lineOfBusiness.Marketplace_Lending,this.Attributes.LOV.lineOfBusiness.Payments]
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        if(opportunityType){
            var opportunityTypeId = opportunityType[0].id.replace("{","").replace("}","").toLowerCase();
            if(_3LOBs.includes(opportunityTypeId) && opportunitySFIdText){
                //call the functions required for 3 LOB Migrated records
                
                var stageSFLOV = this.Attributes.LOV.StageSF;
                
                var sequenceOfBPFStages = {
                    "Assessment": 1,
                    "Negotiation": 2,
                    "Onboarding": 3,
                    "Completion": 4,
                    "Closed Won": 5,
                    "Closed Lost": 5,    //these three have same sequence as they are rendered dynamically
                    "Closed Decline": 5,
                }
                var migrated3LOBOptions = [stageSFLOV.Assessment,stageSFLOV.Negotiation,stageSFLOV.Onboarding,stageSFLOV.Completion,stageSFLOV.ClosedWon]; //,stageSFLOV.ClosedLost,stageSFLOV.ClosedDecline

                this.autoMoveBPF(executionContext, sequenceOfBPFStages);
                //this.filterStageSFOptions(executionContext,migrated3LOBOptions);
                this.setStageSFOptionsBasedOnClose(executionContext,migrated3LOBOptions);
                
                formContext.data.process.addOnStageChange((executionContext)=>{
                    var formContext = executionContext.getFormContext();
                    this.setStageSFField(formContext);
                    this.setBPFStageField(formContext);
                    this.setCloseToDefault(formContext);
                    this.setStageSFOptionsBasedOnClose(executionContext, migrated3LOBOptions);
                });
                
                formContext.getAttribute(this.Attributes.Opportunity.stagesf).addOnChange((executionContext)=>{
                    this.autoMoveBPF(executionContext, sequenceOfBPFStages);
                    this.setCloseToDefault(formContext);    // this function will check stage and then set default value
                });
                
                formContext.getAttribute(this.Attributes.Opportunity.CloseNew).addOnChange((executionContext)=>{
                    var formContext = executionContext.getFormContext();
                    this.setStageSFOptionsBasedOnClose(executionContext,migrated3LOBOptions);
                    this.setStageSfBasedOnClose(executionContext);
                });
            }
        }
    },
    registerOnChangeEvents: function (executionContext) {    
        var formContext = executionContext.getFormContext();
        
        formContext.getAttribute(this.Attributes.Opportunity.Status).addOnChange(this.SetvalueForStatusonStatusTab);
        
        formContext.getAttribute(this.Attributes.Opportunity.Statuss).addOnChange(this.setStatusTabFieldsMofiedOpportunity);
        formContext.getAttribute(this.Attributes.Opportunity.TerminationDateStatusTab).addOnChange(this.setStatusTabFieldsMofiedOpportunity);
        formContext.getAttribute(this.Attributes.Opportunity.TerminationReasonNew).addOnChange(this.setStatusTabFieldsMofiedOpportunity);
        formContext.getAttribute(this.Attributes.Opportunity.TerminationRequesteByStatusTab).addOnChange(this.setStatusTabFieldsMofiedOpportunity);
        formContext.getAttribute(this.Attributes.Opportunity.terminationdescriptiondecline).addOnChange(this.setStatusTabFieldsMofiedOpportunity);
    },
    setStatusTabFieldsMofiedOpportunity: function (executionContext) {   
        var formContext = executionContext.getFormContext();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.statustabfieldsmodifiedopportunity).setValue(true);
    },
    
    loadDataFromCommonJS: function (executionContext) {
		var formContext = executionContext.getFormContext();
		var CommonJsObj = CRB.CRM.PJ.Common;
		this.Attributes.LOV.lineOfBusiness = CommonJsObj.Common.LOV.LineOfBusinessGuids;
		this.Attributes.LOV.productNames = CommonJsObj.Common.LOV.ProductNamesGuids;
		this.Attributes.LOV.featureNames = CommonJsObj.Common.LOV.FeatureNamesGuids;
        this.Attributes.LOV.TeamNames = CommonJsObj.Common.LOV.Teams;
        this.Attributes.LOV.BPFStages = CommonJsObj.Common.LOV.BPFStages;
	},
    onBPFStageChange: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        var oppoName = formContext.data.entity.getEntityName();
        var processStageField = formContext.data.process.getSelectedStage();
        var currentStage = processStageField.getName();
        var close = formContext.getAttribute("crb_closepreonboarding").getValue();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
                
         switch (currentStage) {
            case opportunityObject.Attributes.LOV.BPFStages.Discovery:                 
                CRB.CRM.PJ.Opportunity.onStatuschange(executionContext);
                break;
            case opportunityObject.Attributes.LOV.BPFStages.Qualification:
                await Xrm.WebApi.retrieveRecord(oppoName, oppoId, "?$select=crb_status&$expand=crb_Opportunity_Opportunity_crb_Initialduedil($select=crb_iddstatus),crb_Opportunity_Opportunity_crb_pricingpropos($select=crb_pricingproposalstatus)")
                    .then(function success(result) {
                        var flag = false;
                        for (var j = 0; j < result.crb_Opportunity_Opportunity_crb_Initialduedil.length; j++) {
                            var iddstatuss = result.crb_Opportunity_Opportunity_crb_Initialduedil[j][(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.iddstatus)];

                            if (iddstatuss !== 7) {
                                flag = true;
                                break;
                            }
                        }
                        if (!flag) {
                            for (var j = 0; j < result.crb_Opportunity_Opportunity_crb_pricingpropos.length; j++) {
                                var pricingproposalstatuss = result.crb_Opportunity_Opportunity_crb_pricingpropos[j][(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.PricingProposalStatus)];

                                if (pricingproposalstatuss !== 5) {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if (!flag) {
                            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(3);
                        }
                        else {
                            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(2);
                        }
                        formContext.data.entity.save();
                    },
                        function (error) {
                            //console.log(error.message);
                        }
                    );
                break;
            case opportunityObject.Attributes.LOV.BPFStages.PreOnboarding:
                await Xrm.WebApi.retrieveRecord(oppoName, oppoId, "?$select=crb_status&$expand=crb_Opportunity_Opportunity_crb_feepayment($select=crb_feepaymentstatus),crb_Opportunity_Opportunity_crb_termsheet($select=crb_termsheetstatus),crb_Opportunity_Opportunity_crb_OpportunityTe($select=crb_role)")
                    .then(
                        function success(result) {
                            var temp1 = result["crb_Opportunity_Opportunity_crb_feepayment"];
                            var flag = false;
                            var flag1 = false;
                            var flag2 = false;
                            var flag3 = false;
                            temp1.forEach(element => {
                                if (element["crb_feepaymentstatus"] !== 1) {        //1 implies fee payment is Sent
                                    flag = true;
                                }
                            });

                            if (!flag) {
                                var temp2 = result["crb_Opportunity_Opportunity_crb_termsheet"];
                                temp2.forEach(element => {
                                    if (element["crb_termsheetstatus"] !== 3) {         //3 implies termsheet is completed
                                        flag = true;
                                    }
                                });
                            }
//                            if (!flag) {      //commented below as not required for P3
//                                var temp3 = result["crb_Opportunity_Opportunity_crb_OpportunityTe"];
//                                temp3.forEach(element => {
//                                    if (element["crb_role"] === 2 ) {         
//                                        flag1 = true;
//                                    }
//                                    if (element["crb_role"] === 3) {
//                                                      
//                                        flag2 = true;
//                                    }
//                                    if (element["crb_role"] === 6) {
//                                        flag3 = true;
//                                    }
//                                });
//                                if (!flag1 || !flag2 || !flag3) {
//                                    flag = true;
//                                }
//                            }

                            if (!flag && close == null) {
                                formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(3);
                            }
                            else if (close !== null) {
                                //this.populateOpportunityStatusWithClosedField(executionContext);
                            }
                            else {
                                formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(2);
                            }
                            formContext.data.entity.save();
                        },
                        function (error) {
                            //console.log(error.message);
                        }
                    );
                break;
            case opportunityObject.Attributes.LOV.BPFStages.Completion:
                var committeeApprovalDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.committeeapprovaldatecompletion).getValue();
                var alphaStartDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.alphaTestingStartDate).getValue();
                var alphaEndDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.alphaTestingEndDate).getValue();
                var betaStartDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.betatestingStartDate).getValue();
                var betaEndDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.betatestingEndDate).getValue();
                formContext.getControl("header_process_crb_status").setDisabled(true);
                if(committeeApprovalDate === null){
                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(2);
                    //formContext.getAttribute("header_process_crb_status").setValue(2);
                }
                else{
                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(3);
                }
                break;
               
        }
    },
    tabHiding: function (executionContext) { 
        "use strict";
        var formContext = executionContext.getFormContext();
        formContext.data.process.addOnStageChange(this.onStageChange)
        //CRB.CRM.PJ.Opportunity.hidingofSubstatus(executionContext);
    },
    onStageChange: function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var stage = formContext.data.process.getSelectedStage();
       // CRB.CRM.PJ.Opportunity.hidingofSubstatus(executionContext);
        var stageName = stage.getName();
        var opportunityObject = CRB.CRM.PJ.Opportunity;

        if (stageName === opportunityObject.Attributes.LOV.BPFStages.Discovery) {
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(true);
            //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
            
            formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
            formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
            formContext.getControl("header_crb_substatus").setVisible(true);
            
            //this.hidingofSubstatus(executionContext);
        }
        else if (stageName === opportunityObject.Attributes.LOV.BPFStages.Qualification) {
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
            //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
            
            formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
            formContext.getControl("header_crb_substatus").setVisible(false);
            
            //this.hidingofSubstatus(executionContext);
            //formContext.data.refresh(true);

        }
        else if (stageName === opportunityObject.Attributes.LOV.BPFStages.PreOnboarding) {
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
            //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(true);
            
             //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
            formContext.getControl("header_crb_substatus").setVisible(false);
            
            //this.hidingofSubstatus(executionContext);
        }
        else if(stageName === "Onboarding"){
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
            //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
            
             //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
           formContext.getControl("header_crb_substatus").setVisible(false);
           
            //this.hidingofSubstatus(executionContext);
        }
        else {
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(true);
            //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(true);
            formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
            //this.hidingofSubstatus(executionContext);
        }
        
    },
    onSaveOpportunity: function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        //this.onStatuschange(executionContext);
        //this.hidingofSubstatus(executionContext);
        //this.SetOptyStatus(executionContext);
        //this.OPTYStatusInpgogressWhenTermSheetIsSent(executionContext);
        this.onBPFStageChange(executionContext);
       
    },
    onStatuschange: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var saveEvent = executionContext.getEventArgs();
        var subStatus = formContext.getAttribute(this.Attributes.Opportunity.SubStatus).getValue();
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        var processStageField = formContext.data.process.getSelectedStage();
        var currentStage = processStageField.getName();
        var statusflag = false;
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        var close = formContext.getAttribute("crb_close").getValue();
        if(currentStage === opportunityObject.Attributes.LOV.BPFStages.Discovery){
        var subStatusValue = null;
                await Xrm.WebApi.retrieveRecord("opportunity",oppoId, "?$select=crb_substatus").then(
                    function success(result) {
                        subStatusValue = result["crb_substatus"];
                    },
                    function(error) {
                    }
                );
        if (subStatus === 4) {

            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
                "  <entity name='task'>" +
                "    <attribute name='subject' />" +
                "    <attribute name='statecode' />" +
                "    <attribute name='prioritycode' />" +
                "    <attribute name='scheduledend' />" +
                "    <attribute name='createdby' />" +
                "    <attribute name='regardingobjectid' />" +
                "    <attribute name='activityid' />" +
                "    <order attribute='subject' descending='false' />" +
                "    <filter type='and'>" +
                "      <condition attribute='statecode' operator='eq' value='0' />" +
                "    </filter>" +
                "    <link-entity name='crb_intakeflow' from='crb_intakeflowid' to='regardingobjectid' link-type='inner' alias='au'>" +
                "      <link-entity name='opportunity' from='opportunityid' to='crb_opportunity' link-type='inner' alias='av'>" +
                "        <filter type='and'>" +
                "          <condition attribute='opportunityid' operator='eq' uiname='' uitype='opportunity' value='" + oppoId + "' />" +
                "        </filter>" +
                "      </link-entity>" +
                "    </link-entity>" +
                "  </entity>" +
                "</fetch>";
            fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
            await Xrm.WebApi.retrieveMultipleRecords("task", fetchXml).then
                (function success(result) {
                    
                    if (result.entities.length > 0) {
                        var alertStrings = { confirmButtonLabel: "Ok", text: "Pending tasks and hence cannot set the sub status as \"Intake Flow completed\"", title: "Alert" };
                        var alertOptions = { height: 120, width: 260 };
                        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                            function (success) {
                               // formContext.data.refresh(false);
                               // console.log("Alert dialog closed");
                                saveEvent.preventDefault();
                            },
                            function (error) {
                               // console.log(error.message);
                            }
                        );
                        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setValue(subStatusValue); //Opportunity SubStatus
                        //formContext.data.refresh();


                    }
                    else {
                       // console.log("else case");
                        statusflag = true;
                    }

                },
                    function (error) {
                        Xrm.Navigation.openAlertDialog(error.message);
                    });


        }
        if (subStatus === 4 && statusflag === true) {
            
            var flag = false;
            Xrm.WebApi.retrieveRecord("opportunity", oppoId, "?$select=opportunityid&$expand=crb_Opportunity_Opportunity_crb_product($select=crb_productid,_crb_productname_value),crb_Opportunity_Opportunity_crb_productandpro($select=crb_productandprojectionsid,_crb_projectionname_value)").then(
                function success(result) {
                    if (result.crb_Opportunity_Opportunity_crb_product.length > 0 && close == null) {
                        flag = true;
                        statusflag = false;
                        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(3);
                    }
                    else if(close !== null){
                    this.populateOpportunityStatusWithClosedField(executionContext);
                    }
                    else if (flag === false) {
                        
                        Xrm.Navigation.openAlertDialog(
                            "No products found for the Opportunity hence cannot set the sub status as Intake Flow completed"
                        ).then(
                            function (success) {

                              
                            },
                            function (error) {
                               // console.log(error);
                            });
                            
                            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setValue(subStatusValue); //Opportunity SubStatus
                    }

                   // console.log(result);

                    var opportunityid = result["opportunityid"]; // Guid


                },
                function (error) {
                   // console.log(error.message);
                }
            );

        } else return
         //this.SetOptyStatus(executionContext);
        }
    },
        makeOpporunityTopicEditableForCloneOpportunity: function (executionContext) {
     var formContext = executionContext.getFormContext();
	var cloneOpportunityGUIDnew= formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.CloneOpportunityGUIDNew).getValue();
     if (cloneOpportunityGUIDnew !== null) {
         formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityTopic).setDisabled(false);
        }
     else {
         formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityTopic).setDisabled(true);
          }
    },
    RunPowerAutomateFlowPreOnBoarding: async function (formContext) {
		"use strict";
        var opportunityId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.setpreonboarding).setValue(true);
        formContext.data.save();
        Xrm.Navigation.openAlertDialog("Pre-Onboaring Approvals Sent.");
//        var value= "";
//        var body = {
//            "opportunityId": opportunityId
//        }
//        await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 4").then((result) => {
//            value = result.entities[0]["crb_value"];
//        })
//        var url = value;
//        var req = new XMLHttpRequest();
//        req.open("POST", url, true);
//        req.setRequestHeader('Content-Type', 'application/json');
//        req.send(JSON.stringify(body));
//        req.onreadystatechange = function () {
//            if (this.readyState === 4) {
//                if (this.status === 202) {
//                    Xrm.Navigation.openAlertDialog("Pre-Onboaring Approvals Sent.");
//
//                } else {
//                    Xrm.Navigation.openAlertDialog("Pre-Onboaring Approvals Sending Failed.");
//                }
//            }
//        };
    },
    BpfSTageNextButton: function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        
        var subStatus = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).getValue();
        var close = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.close).getValue();
        var closePreonboarding = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.closePreOnboarding).getValue();
        var processStageField = formContext.data.process.getSelectedStage();
        var currentStage = processStageField.getName();
        var opportunityObject = CRB.CRM.PJ.Opportunity;

        if (subStatus !== 4 && currentStage === opportunityObject.Attributes.LOV.BPFStages.Discovery && close === null) {

            var alertStrings = { confirmButtonLabel: "Ok", text: "Please complete the intake flow before proceeding to next stage", title: "Alert" };
            var alertOptions = { height: 120, width: 260 };
            executionContext.getEventArgs().preventDefault();
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function (success) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                   // console.log(error.message);
                });
             }
            
//            if (currentStage === opportunityObject.Attributes.LOV.BPFStages.PreOnboarding) {  //Commented as not required for p3
//            if (executionContext.getEventArgs().getDirection() === "Next") {
//                let isGDDLeadOwner = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.isgddleadowner).getValue();
//                let bdComment = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.bdComment).getValue();
//                let opportunityStatus = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).getValue();
//                if (!isGDDLeadOwner && closePreonboarding === null) {
//                    executionContext.getEventArgs().preventDefault();
//                    var alertStrings = { confirmButtonLabel: "Ok", text: "Please make sure that the General Due Diligence Lead is the Owner.", title: "Alert" };
//                    var alertOptions = { height: 120, width: 260 };
//                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions)
//                }
//                else if ((bdComment === null || bdComment === "") && closePreonboarding === null) {
//                    executionContext.getEventArgs().preventDefault();
//                    let alertStrings = {
//                        text: "As you transition this Opportunity to Onboarding, please make sure to complete the below two action items:\nâ€¢ Add any information youâ€™d like to pass along to the Opportunity Owner in the BD Comments field\nâ€¢ Fill in the rest of the Opportunity Team with Due Diligence, Implementation and Relationship Management team members\nâ€¢ Please make sure 'Termsheet' and 'Fee Payment' are completed.",
//                        title: "Alert!"
//                    };
//                    let alertOptions = { height: 300, width: 500 };
//
//                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions)
//                }
//                else if (opportunityStatus===2 && closePreonboarding === null) {
//                    executionContext.getEventArgs().preventDefault();
//                    let alertStrings = {
//                        text: "Before transitioning this Opportunity to Onboarding,\n1. Please add in the required areas of assistance and roles on your Opportunity Team\nâ€¢ Due Diligence\nâ€¢ Implementation and\nâ€¢ Relationship Management\n2. Please make sure 'Termsheet' and 'Fee Payment' are completed.",
//                        title: "Alert!"
//                    };
//                    let alertOptions = { height: 300, width: 500 };
//                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions)
//                }
//            }
//        }
        },

    

    // IDD status change display alert
    onIDDStatusChange : async function (executionContext) {
	"use strict";
    const formContext = executionContext.getFormContext();
    var subStatus = formContext.getAttribute("crb_iddstatus").getValue();
    formContext.ui.clearFormNotification();
        if (subStatus === 7) {
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        
           await Xrm.WebApi.retrieveMultipleRecords("task", "?$select=subject,statecode&$filter=_regardingobjectid_value eq '" + oppoId + "'").then(function success(result) {
 
            if (result !== null && result.entities.length > 0) {
                for (var i = 0; i < result.entities.length; i++) {
                    var taskstatus = result.entities[i]["statecode"];
                    if (taskstatus !== "1") {
                        //alert("Pending tasks and hence cannot set the idd status");
                        //formContext.ui.setFormNotification("There are still pending tasks open. You need to close them before you can set the sub status as complete.","ERROR");
                        //var substatus = formContext.getControl("crb_iddstatus");
                        //substatus.clearOptions();
                        formContext.getAttribute('crb_iddstatus').setValue(null);

						var alertStrings = { confirmButtonLabel: "Ok", text: "There are still pending tasks open. You need to close them before you can set the sub status as complete.", title: "Alert" };
		                var alertOptions = { height: 120, width: 260 };

						Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
							function (success) {
								//console.log("Alert dialog closed");
							},

							function (error) {
								//console.log(error.message);
							}
						);
                    }
                }
            }
        },
        function (error) {
           // console.log(error.message);
        }
    ); 
    
   }
  },


    
  
  hidingofSubstatus : function (executionContext) {
    "use strict";
        var formContext = executionContext.getFormContext();
        var bpfStage = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.BPFStage).getValue();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        
	    if (bpfStage === opportunityObject.Attributes.LOV.BPFStages.Discovery) {
        formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
        formContext.getControl("header_crb_substatus").setVisible(true);
       // this.AutoMoveBPFStage(executionContext);
		}
		else if (bpfStage === opportunityObject.Attributes.LOV.BPFStages.Qualification) {
        formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
        formContext.getControl("header_crb_substatus").setVisible(false);
        
		}
        else if (bpfStage === opportunityObject.Attributes.LOV.BPFStages.PreOnboarding) {
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
        formContext.getControl("header_crb_substatus").setVisible(false);
		}
//        else if (bpfStage === opportunityObject.Attributes.LOV.BPFStages.Discovery) {
//        formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
//        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setVisible(false);
//        formContext.getControl("header_crb_substatus").setVisible(true);
//		}
        else if (bpfStage === opportunityObject.Attributes.LOV.BPFStages.Onboarding) {
        //formContext.ui.tabs.get("Opportunity Information").sections.get("Pre-Onboarding Approval").setVisible(false);
        formContext.getControl("header_crb_substatus").setVisible(false);
		}
        else {
        //do nothing
        }
       
    },
    Updatepricingproposalstatus :async function (executionContext){
    var formContext = executionContext.getFormContext();
    var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
    var statuslist=[];
    await Xrm.WebApi.retrieveMultipleRecords("crb_pricingproposal", "?$select=crb_pricingproposalstatus&$filter=_crb_opportunity_value eq "+oppoId+ " &$orderby=crb_pricingproposalstatus asc").then(
        function success(results) {
            console.log(results);
            for (var i = 0; i < results.entities.length; i++) {
                var result = results.entities[i];
                // Columns
                var crb_pricingproposalid = result["crb_pricingproposalid"]; // Guid
                var crb_pricingproposalstatus = result["crb_pricingproposalstatus"]; // Choice
                if (crb_pricingproposalstatus!==null){
                   statuslist.push(crb_pricingproposalstatus);
                }
                var crb_pricingproposalstatus_formatted = result["crb_pricingproposalstatus@OData.Community.Display.V1.FormattedValue"];
            }
        },
        function(error) {
            console.log(error.message);
        }
    );
    statuslist.sort();
    formContext.getAttribute(this.Attributes.Opportunity.PricingProposalStatus).setValue(statuslist[0])
    },
    onSubStatuschange: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var subStatus = formContext.getAttribute(this.Attributes.Opportunity.SubStatus).getValue();
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        var processStageField = formContext.data.process.getSelectedStage();
        var currentStage = processStageField.getName();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        if(currentStage === opportunityObject.Attributes.LOV.BPFStages.Discovery){
            if (subStatus !== 4) {
                Xrm.Navigation.openAlertDialog(
                    "This feature is not enabled until the Partner Portal is functional. In the meantime, please change the sub-status to Intake Flow Completed."
                ).then(
                    function (success) {  
                    },
                    function (error) {
                    });
                var subStatusValue = null;
                await Xrm.WebApi.retrieveRecord("opportunity",oppoId, "?$select=crb_substatus").then(
                    function success(result) {
                        subStatusValue = result["crb_substatus"];
                    },
                    function(error) {
                    }
                );
                formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.SubStatus).setValue(subStatusValue)
                
            }
        }
    },
 onChangeOFOpportunityRecordOwner: async function (executionContext) {
        var formContext = executionContext.getFormContext();
        await this.setIsOwnerGDDLead(executionContext);

        this.updateOnboardingOwner(executionContext);

    },
setIsOwnerGDDLead: async function (executionContext) {
        var formContext = executionContext.getFormContext();
        var owner = formContext.getAttribute(this.Attributes.Opportunity.owner).getValue();
        let result = false;
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        // checking if owner field is null or not
        if (owner) {
            var ownerName = owner[0].name;
            var ownerType = owner[0].entityType;
            var ownerID = owner[0].id;

            // let opptyMember = [];

            //retrieving opportunity team member who is owner of opportunity
            let teamName = opportunityObject.Attributes.LOV.TeamNames.GeneralDueDiligence;
            let result = await CRB.CRM.PJ.Common.checkIfUserIdIsPartOfTeams(ownerID, teamName); 
           
            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.isgddleadowner).setValue(result);
            
            return result;
        }
    },
    updateOnboardingOwner: async function (executionContext) {
        var formContext = executionContext.getFormContext();
        var processStageField = formContext.data.process.getSelectedStage();
        var currentStage = processStageField.getName();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        if (currentStage === opportunityObject.Attributes.LOV.BPFStages.PreOnboarding) {
            var preOnboardingAprrovalStatus = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ApprovalStatus).getValue();
            if (preOnboardingAprrovalStatus === this.ListOfValues.ApprovalStatus.Approve) {
                var owner = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.owner).getValue();
                var ownerName = owner[0].name;
                var ownerType = owner[0].entityType;
                var ownerID = owner[0].id;
                var linkedOnboarding = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Onboarding).getValue();
                if (linkedOnboarding) {
                    var id = linkedOnboarding[0].id.replace("{", "").replace("}", "");
                    var data = {
                    }
                    data["ownerid@odata.bind"] = "/systemusers(" + id + ")"
                    Xrm.WebApi.updateRecord('crb_onboarding', id, data).then(
                        function success(result) {
                            // perform operations on record update

                        },
                        function (error) {
                            //console.log(error.message);
                            // handle error conditions
                        }
                    );
                }
            }
        }
    },
    checkIfUserIdIsPartOfTeams: async function (userId, teamNames) {
		userId = userId.replace("{", "").replace("}", "");
		let result = false;	

		let options = "?$select=name,teammembership_association&$expand=teammembership_association($select=systemuserid,fullname;$filter=systemuserid eq " + userId + ")";

		let outputTeams = [];
		await Xrm.WebApi.retrieveMultipleRecords("team", options).then(
			(results) => {
				outputTeams = results.entities;
			})
			.catch((error) => {
				//console.error(error.message);
			});

		outputTeams = outputTeams.filter((team) => {
			return team.teammembership_association.length > 0;
		})

		let teamNamesArray = teamNames.split(",");
		for(var i=0; i<outputTeams.length; i++){
			if(teamNamesArray.includes(outputTeams[i].name)){
				result = true;
				break;
			}
		}
		return result;
	},
     showandhideNewbutton: async function (PrimaryControl) {

        var opportunityObject = this.Attributes.LOV.BPFStages.Discovery;
		var teamsView = this.Attributes.LOV.TeamNames.GeneralDueDiligence;
		var userId = Xrm.Utility.getGlobalContext().userSettings.userId.replace("{", "").replace("}", "");
		var isMemberOfTeamsView = await CRB.CRM.PJ.Common.checkIfUserIdIsPartOfTeams(userId, teamsView);
        var stage = Xrm.Page.data.process.getActiveStage().getName();
		//var contractInFocus = formContext.ui.tabs.get(CRB.CRM.PJ.Onboarding.TabName.Contract).getDisplayState();
		//var selectedcontrolcount = SelectedControlSelectedItemIds.length;
		if (isMemberOfTeamsView || opportunityObject == stage) {
			return true
		}
		else {
			return false
		}
	},
    showandhideDeletebutton: async function (PrimaryControl) {

		var teamsView = this.Attributes.LOV.TeamNames.GeneralDueDiligence;
		var userId = Xrm.Utility.getGlobalContext().userSettings.userId.replace("{", "").replace("}", "");
		var isMemberOfTeamsView = await CRB.CRM.PJ.Common.checkIfUserIdIsPartOfTeams(userId, teamsView);
		//var contractInFocus = formContext.ui.tabs.get(CRB.CRM.PJ.Onboarding.TabName.Contract).getDisplayState();
		//var selectedcontrolcount = SelectedControlSelectedItemIds.length;
		if (isMemberOfTeamsView) {
			return true
		}
		else {
			return false
		}
	},
    hidingofIDDTab : async function (executionContext) {
    "use strict";
        var formContext = executionContext.getFormContext();
		var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
		var LOB;
        var flag=false;
        var bpfStage = formContext.data.process.getActiveStage();
        var currentStageName = bpfStage.getName();
       await Xrm.WebApi.retrieveMultipleRecords("crb_product", "?$select=_crb_lineofbusiness_value&$filter=_crb_opportunity_value eq '" + oppoId + "'").then(
	function success(results) {
		console.log(results);
		for (var i = 0; i < results.entities.length; i++) {
			var result = results.entities[i];
			// Columns
			var crb_productid = result["crb_productid"]; // Guid
			var crb_lineofbusiness = result["_crb_lineofbusiness_value"]; // Lookup
			LOB = result["_crb_lineofbusiness_value@OData.Community.Display.V1.FormattedValue"];
			var crb_lineofbusiness_lookuplogicalname = result["_crb_lineofbusiness_value@Microsoft.Dynamics.CRM.lookuplogicalname"];
		if(LOB!=="Marketplace Lending"){
		 //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
         flag=true;
		}
		
        }
		if(flag==true && currentStageName=="Qualification"){
		 formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(true);
         
		}
        else{
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
         }
         if(flag==true && currentStageName=="Pre-Onboarding"){
		 formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(true);
         
		}
        else{
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
         }
	},
	function(error) {
		console.log(error.message);
	}
);
    },
    PricingProposalButton: function(PrimaryControl) {
    var formContext = PrimaryControl;
    formContext.getAttribute("crb_generatepricingproposal").setValue(true);
    let alertStrings = { confirmButtonLabel: 'OK', title: 'Alert' ,text: "Generating pricing proposal." };
    let alertOptions = { height: 150, width: 300 };
    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions);
    },
    hideCreateButtonForStage1: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        var currentStage = formContext.data.process.getActiveStage();
        if (currentStage) {
            var activeStageName = currentStage.getName();
            var activeStageId = currentStage.getId();
            if (activeStageName === opportunityObject.Attributes.LOV.BPFStages.PreOnboarding) {
                formContext.data.process.getActiveStage().getNavigationBehavior().allowCreateNew = function () {
                    return false // hide the create button
                }
            }     
        }  
    }, 
     //Phase - 3
     populateOpportunityStatusWithClosedField: function (executionContext) {
     var formContext = executionContext.getFormContext();
     var close = formContext.getAttribute("crb_close").getValue();
     var closeQuaification = formContext.getAttribute("crb_closequalification").getValue();
     var closePreonboarding = formContext.getAttribute("crb_closepreonboarding").getValue();
     if (close == 1 || closeQuaification == 1 || closePreonboarding == 1) {
         formContext.getAttribute(this.Attributes.Opportunity.Status).setValue(4);
         
         
     }
     else if (close == 2 || closeQuaification == 2 || closePreonboarding == 2) {
         formContext.getAttribute(this.Attributes.Opportunity.Status).setValue(5);
         
     }
     else if (close == null) {
         formContext.getAttribute(this.Attributes.Opportunity.Status).setValue(3);
     }
    //formContext.data.entity.save();
    //formContext.data.process.moveNext();

    }, 
     ShowAndHideCloseFieldOnTheBasisofBPFStage: function (executionContext) {
      var formContext = executionContext.getFormContext();

      var bpfStage = formContext.data.process.getActiveStage();
      var currentStageName = bpfStage.getName();
      var selectedStage = formContext.data.process.getSelectedStage().getName();

      if (currentStageName == "Discovery" || selectedStage == "Discovery") {
          formContext.getControl("crb_close").setVisible(true);
          formContext.getControl("crb_closequalification").setVisible(false);
          formContext.getControl("crb_closepreonboarding").setVisible(false);
      }
      else if (currentStageName == "Qualification" || selectedStage == "Qualification") {
          formContext.getControl("crb_closequalification").setVisible(true);
          formContext.getControl("crb_close").setVisible(false);
          formContext.getControl("crb_closepreonboarding").setVisible(false);
      }
      else if (currentStageName == "Pre-Onboarding" || selectedStage == "Pre-Onboarding") {
          formContext.getControl("crb_closepreonboarding").setVisible(true);
          formContext.getControl("crb_close").setVisible(false);
          formContext.getControl("crb_closequalification").setVisible(false);
      }
     },
     AutoMoveBPFStage: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var close = formContext.getAttribute("crb_close").getValue();
        var closeQuaification = formContext.getAttribute("crb_closequalification").getValue();
        var closePreonboarding = formContext.getAttribute("crb_closepreonboarding").getValue();
        if (close !== null || closeQuaification !== null || closePreonboarding !== null) {
            formContext.data.save().then(()=>{
                formContext.data.process.moveNext()});        
        }
    },
    ShowAndHideCloseLostandDeclineTab: function (executionContext) {
    //Show and hide of completion and won tab also added in this function
    var formContext = executionContext.getFormContext();

    var bpfStage = formContext.data.process.getActiveStage();
    var currentStageName = bpfStage.getName();
    var opportunityObject = CRB.CRM.PJ.Opportunity;
    if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.ClosedLost) {
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
        //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedDecline).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedLost).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityTeam).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedWon).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityInformation).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.headerSubStatus).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.StatusTab).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.completion).setVisible(false);
        //this.AutoMoveBPFStage(executionContext);
        //CRB.CRM.PJ.Opportunity.populateOpportunityStatusWithClosedField(executionContext);
        //CRB.CRM.PJ.Opportunity.SetvalueForStatusonStatusTab(executionContext);
         if(formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).getValue() !== CRB.CRM.PJ.Opportunity.Attributes.LOV.Status.ClosedLost){
             formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(4);
             formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).fireOnChange();
         }
                 

    }
    else if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.ClosedDecline) {
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
        //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedDecline).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedLost).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityTeam).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedWon).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityInformation).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.headerSubStatus).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.StatusTab).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.completion).setVisible(false);
        //CRB.CRM.PJ.Opportunity.populateOpportunityStatusWithClosedField(executionContext);
        //CRB.CRM.PJ.Opportunity.SetvalueForStatusonStatusTab(executionContext);
        if(formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).getValue() !== CRB.CRM.PJ.Opportunity.Attributes.LOV.Status.ClosedDecline){
             formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(5);
             formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).fireOnChange();
         }
    }
    else if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.Completion) {
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
        //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedDecline).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedLost).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.completion).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityTeam).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedWon).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityInformation).setVisible(false);
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(3);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.headerSubStatus).setVisible(false);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setValue(100000002);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setDisabled(true);
    }
     else if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.ClosedWon) {
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Intake).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Documents).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Products).setVisible(false);
        //formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Projection).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.Initialduediligence).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OnboardingApproval).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.TermSheet).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.PricingProposal).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.FeePayment).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedDecline).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedLost).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.completion).setVisible(false);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.ClosedWon).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityTeam).setVisible(true);
        formContext.ui.tabs.get(CRB.CRM.PJ.Opportunity.TabName.OpportunityInformation).setVisible(false);
        //setting opportunity status as close won
        if(formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).getValue() !== CRB.CRM.PJ.Opportunity.Attributes.LOV.Status.ClosedWon){
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).setValue(6);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Status).fireOnChange();
        }
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.headerSubStatus).setVisible(false);
    }
    else{
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setValue(100000002);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setDisabled(true);
    }
   
},
    populateTerminationDate: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var bpfStage = formContext.data.process.getActiveStage();
    var currentStageName = bpfStage.getName();
    var currentDate = new Date();
    var opportunityObject = CRB.CRM.PJ.Opportunity;

    if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.ClosedLost) {
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.terminationdatelost).setValue(currentDate);
    }
    else if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.ClosedDecline) {
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.terminationdatedecline).setValue(currentDate);
    }
    
},
      //phase 3
     showhidefieldinoppurtunity:function (executionContext) {
        var formContext = executionContext.getFormContext();       
        var ExSupportAnotherProgram = formContext.getAttribute(this.Attributes.Opportunity.ExSupportAnotherProgram).getValue();
        
        if(ExSupportAnotherProgram !== null && ExSupportAnotherProgram === this.ListOfValues.ExSuppAnotherProgram.Yes){
            formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ExistingSupportProgram).setVisible(true);
        }
        else{
            formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ExistingSupportProgram).setVisible(false);
        }
    },
    showHideBPF: function (executionContext){
        var formContext = executionContext.getFormContext();
        var formName =  formContext.ui.formSelector.getCurrentItem().getLabel();
        var isChildPartner = formContext.getAttribute(this.Attributes.Opportunity.isChildPartner).getValue();
        if (isChildPartner){
            formContext.ui.process.setVisible(false);
            formContext.getAttribute(this.Attributes.Opportunity.signedcontractdate).setRequiredLevel("required");
            formContext.getAttribute(this.Attributes.Opportunity.golivedate).setRequiredLevel("required");
            formContext.getAttribute(this.Attributes.Opportunity.Status).setRequiredLevel("required");
            
        }
        else{
            formContext.ui.process.setVisible(true);
            formContext.getAttribute(this.Attributes.Opportunity.signedcontractdate).setRequiredLevel("none");
            formContext.getAttribute(this.Attributes.Opportunity.golivedate).setRequiredLevel("none");
            formContext.getAttribute(this.Attributes.Opportunity.Status).setRequiredLevel("none");
        }
    },

     AlertOnStageClosedWon: function (executionContext) {
     var formContext = executionContext.getFormContext();
    
     var contractSignDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.signedcontractdate).getValue();
     var ExcSupportAnotherProgram = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ExSupportAnotherProgram).getValue();
     //var exisitingsupprtProgram = formContext.getAttribute(this.Attributes.Opportunity.ExistingSupportProgram).getValue();
     var termsheetdate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.termsheetsigneddate).getValue();
     var GOlivedate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.golivedate).getValue();
     var committeeapprovaldatecompletion = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.committeeapprovaldatecompletion).getValue();
     var processStageField = formContext.data.process.getSelectedStage();
     var currentStage = processStageField.getName();
     var opportunityObject = CRB.CRM.PJ.Opportunity;
     if (currentStage == opportunityObject.Attributes.LOV.BPFStages.Completion && executionContext.getEventArgs().getDirection() === "Next") {
         if (contractSignDate == null || ExcSupportAnotherProgram == null || termsheetdate == null || GOlivedate == null || committeeapprovaldatecompletion == null) {
             executionContext.getEventArgs().preventDefault();

             var alertStrings = {
                 confirmButtonLabel: "Ok", text: "Please add details in below field:-\n  Contract Signed Date\n Term Sheet received from Partner On\n Exclusively Supports Another Program\n Go Live Date\n Committee Approval Date", title: "Alert"
             };
             var alertOptions = { height: 300, width: 260 };
             Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                 function (success) {
                     //console.log("Alert dialog closed");
                     //executionContext.getEventArgs().preventDefault();
                 },
                 function (error) {
                     // console.log(error.message);
                 });
         }
     }     

 },
    redirectToChildPartnerForm: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var targetFormId = "a796f021-04a3-ef11-8a69-7c1e520072fc";
        var targetFormId1 ="72a6c625-51dc-ee11-904c-000d3a1c40a7"
        var availableForms = formContext.ui.formSelector.items.get();
        var currentForm = formContext.ui.formSelector.getCurrentItem().getId();
        var isChildPartner = formContext.getAttribute(this.Attributes.Opportunity.isChildPartner).getValue();
        if (isChildPartner && currentForm != targetFormId) {
            availableForms.forEach(element => {
                if (element.getId() == targetFormId)
                    element.navigate();
            });
        }
        else if(isChildPartner === false && currentForm != targetFormId1){ 
            availableForms.forEach(element => {
                if (element.getId() == targetFormId1)
                    element.navigate();
            });
        }
    },
SetvalueForStatusonStatusTab: function(executionContext){
    var formContext = executionContext.getFormContext();
    var Status = formContext.getAttribute("crb_status").getValue();
    var currentDate = new Date();
    var opportunityObject = CRB.CRM.PJ.Opportunity;
    if (Status == 6){
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).setValue(100000000);
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).fireOnChange();
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setDisabled(false);
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(false);
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(false);
    }
    else if (Status == 2){
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).setValue(100000002);
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).fireOnChange();
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(false);
        //formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(false);
    }
    else if (Status == 4 || Status == 5){
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).setValue(100000001);
        formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).fireOnChange();
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Statuss).setDisabled(false);
        var value = formContext.getAttribute(opportunityObject.Attributes.Opportunity.Statuss).getValue();
        if(value == 100000001){
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(true);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setValue(currentDate);
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setRequiredLevel("required");
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setRequiredLevel("required");
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setRequiredLevel("required");
        }
        else{
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(false);

        }

    }

    },
    
    ShowHideFieldsOnStatusTab: function(executionContext){
    var formContext = executionContext.getFormContext();
    var StatusOption = formContext.getAttribute(this.Attributes.Opportunity.Statuss).getValue();
    var currentDate = new Date();
    if(StatusOption === 100000003){
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(true);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setValue(currentDate);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setRequiredLevel("required");
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setRequiredLevel("required");
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setRequiredLevel("required");
        
    }
    else if(StatusOption == 100000001){
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setVisible(true);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(true);
        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setValue(currentDate);
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setRequiredLevel("required");
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setRequiredLevel("required");
        //formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setRequiredLevel("required");
        }
    else if (StatusOption == 100000000 || StatusOption == 100000002 || StatusOption == 100000004 || StatusOption == null){
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setVisible(false);
        formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setVisible(false);
    }


},
    MandatoryFieldsOnStatusTab: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var bpfStage = formContext.data.process.getActiveStage();
        var currentStageName = bpfStage.getName();

        if (currentStageName == "Closed Lost" || currentStageName == "Closed Declined") {
            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationDateStatusTab).setRequiredLevel("required");
            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationReasonNew).setRequiredLevel("required");
            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.TerminationRequesteByStatusTab).setRequiredLevel("required");
        }

    },
    

// Show Alert if pre onboarding meeting date is null and product is not MPL
    showAlertonPreonboardingToOnboarding: async function(executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var bpfStage = formContext.data.process.getActiveStage();
        var currentStageName = bpfStage.getName();
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        var oppoName = formContext.data.entity.getEntityName();
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        var MeetingDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.IsMeedtingdateFromPreOnboarding).getValue();
        var ClosePreOnboard = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.closePreOnboarding).getValue();
        var LOB = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.PaymentandBaaSProducy).getValue();
        var Status = formContext.getAttribute("crb_status").getValue();
        if (currentStageName == opportunityObject.Attributes.LOV.BPFStages.PreOnboarding && executionContext.getEventArgs().getDirection() === "Next" && ClosePreOnboard == null && ((MeetingDate !== true && LOB == true) || Status !== 3)) {
            executionContext.getEventArgs().preventDefault();
            var alertStrings = {
                text: "To Transition from Pre-onboarding stage to Onboarding, make sure \n*Pre-Onboarding Meeting Date is added, \n*Termsheet is completed and \n*Fee Payment is sent.",
                title: "Pre-Onboarding"
            };
            var alertOptions = {
                height: 270,
                width: 320
            };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions)
        }
    },
      clonebutton:function(PrimaryControl){
      var formContext=PrimaryControl;
      formContext.getAttribute(this.Attributes.Opportunity.Clonebutton).setValue(true);
        },
        
      forclosedwonoppsubgrid: function (selectedControl) {
        "use strict";
        
        var currentGridName = selectedControl._controlName;
       
        var closedwonopp = "PastOpportunitiesClosedWon";
        if (currentGridName === closedwonopp) {
         return true;
        } 
    else { return false; }
    },
      

    openListofDocumentsonCloningFromSubgrid(primaryControl,selectedControlSelectedItemIds){
        var formContext = primaryControl;
        var oppoId = selectedControlSelectedItemIds[0].replace("{", "").replace("}", "");
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        opportunityObject.openCloneOpportunityWebResource(oppoId);
    },

    openListofDocumentsonCloning: function (primaryControl) {
        var formContext = primaryControl;
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        var opportunityObject = CRB.CRM.PJ.Opportunity;
        opportunityObject.openCloneOpportunityWebResource(oppoId);

    },

    openCloneOpportunityWebResource(oppoId) {
        var webresourceName = "crb_CloneOpportunity";
        var windowOptions = { height: 400, width: 700 };
        var pageInput = {
            pageType: "webresource",
            webresourceName: "crb_CloneOpportunity",
            data: oppoId
        };
        var navigationOptions = {
            target: 2,
            position: 1,
            height: 500,
            width: 500,
            title: "Clone Opportunity"
        };
        Xrm.Navigation.navigateTo(pageInput, navigationOptions).then(
            function (res) {
                // formContext.data.refresh(true);
                // let alertStrings = { confirmButtonLabel: 'Ok', text: 'Cloned Successfully' };
                // let alertOptions = { height: 120, width: 260 };

                // Xrm.Navigation.openAlertDialog(alertStrings, alertOptions);
            },
            function (error) {
                console.error("Error opening web resource: " + error.message);
            }
        );
    },
    updateFlagFiledstoTrue: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        var MeetingDate = "";
        var LOB = "";
        var oppoId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        if (oppoId !== null) {
            await Xrm.WebApi.retrieveMultipleRecords("crb_onboardingapproval", "?$select=_crb_opportunity_value,crb_preonboardingmeetingdatenew&$filter=_crb_opportunity_value eq '" + oppoId + "' ").then(
                function success(results) {
                    console.log(results);
                    for (var i = 0; i < results.entities.length; i++) {
                        var result = results.entities[i];
                        MeetingDate = result["crb_preonboardingmeetingdatenew"];
                        if (MeetingDate !== null) {
                            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.IsMeedtingdateFromPreOnboarding).setValue(true);
                        }
                        else {
                            formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.IsMeedtingdateFromPreOnboarding).setValue(false);
                        }
                    }
                    Xrm.WebApi.retrieveMultipleRecords("crb_product", "?$select=_crb_lineofbusiness_value,_crb_opportunity_value&$filter=_crb_opportunity_value eq '" + oppoId + "' ").then(
                        function success(results) {
                            console.log(results);
                            for (var i = 0; i < results.entities.length; i++) {
                                var result = results.entities[i];
                                LOB = result["_crb_lineofbusiness_value@OData.Community.Display.V1.FormattedValue"];
                                if (LOB === "Payments" || LOB === "BaaS/Cards") {
                                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.PaymentandBaaSProducy).setValue(true);
                                }
                                else {
                                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.PaymentandBaaSProducy).setValue(false);
                                }
                            }
                        },
                    );
                });
        }
    },
    
    HideButtonOnChildPartnerOpportunity: function (primaryControl) {
    //var formContext = executionContext.getFormContext();
    var formContext = primaryControl;
    //var subgridname = selectedControl.getName();
    //var MeetingHub = formContext.ui.tabs.get(CRB.CRM.PJ.Onboarding.TabName.MeetingHub).getDisplayState();
    var formName = Xrm.Page.ui.formSelector.getCurrentItem().getLabel();

    if(formName == "Child Partner Opportunity" ){
        return false;
    }
    else{
    return true;
    }
        
},
    settingPPSoftDefaultValues: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        if(formContext !== null){
            var value;
			var valueJson;
			await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 1231").then((result) => {
				value = result.entities[0]["crb_value"];
				valueJson = JSON.parse(value);
			})
            if (formContext.getAttribute(this.Attributes.Opportunity.programOneTimeFee).getValue() === null) {
				formContext.getAttribute(this.Attributes.Opportunity.programOneTimeFee).setValue(valueJson["crb_programonetimefee"]);
			}
			if (formContext.getAttribute(this.Attributes.Opportunity.programFeeDiscount).getValue() === null) {
				formContext.getAttribute(this.Attributes.Opportunity.programFeeDiscount).setValue(valueJson["crb_programdiscountfee"]);
			}
			if (formContext.getAttribute(this.Attributes.Opportunity.adHocReportingFee).getValue() === null) {
				formContext.getAttribute(this.Attributes.Opportunity.adHocReportingFee).setValue(valueJson["crb_adhocreportingfee"]);
			}
        }
    },
    checkForMigratedRecord:async function(executionContext){
        var formContext = executionContext.getFormContext();
        var opportunitySFIdTextControl = formContext.getAttribute(this.Attributes.Opportunity.opportunitysfid);
        if(!opportunitySFIdTextControl){
            return false;
        }
        var opportunitysfidtext = formContext.getAttribute(this.Attributes.Opportunity.opportunitysfidtext).getValue();
        if(!opportunitysfidtext){
            return false;
        }
        var isLegacyProcess = await this.isLegacyProcessSet(executionContext);
        if(!isLegacyProcess || (isLegacyProcess !== "true" && isLegacyProcess !== "1")){ // since isLegacyProcess in Config is set to false, Record wont be treated as Migrated Record
            this.hideAllBPF(formContext);
            return true;    //returning true to show all the Tabs
        }
        
        this.removeOnSaveFunctionsForETB(formContext);
        
        var isBPFSet = await this.setMigratedRecordBPF(executionContext);
        if(isBPFSet){
            return; // returning as, if BPF is set then form will reload.
        }
        this.makeAllFieldsOptionalForMigratedRecords(executionContext);
        this.makeBPFFieldsReadOnly(formContext);
        //this.filterOptionsFromETBBPFStatus(formContext);
        this.showHideTabsForETBRecords(formContext);
        //this.addClosedWonToClose(formContext); //getting error while saving as this is global optionset
        
        formContext.data.process.addOnStageChange((executionContext)=>{
            var optyObject = CRB.CRM.PJ.Opportunity;
            var isAutoBPFChange = this.localVariables.isAutoBPFJump;
            if(isAutoBPFChange){
            
                var currentStage = formContext.data.process.getActiveStage().getName();
                var stageSF = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getText();
                if(currentStage === stageSF){
                    optyObject.setBPFStageField(formContext);
                    optyObject.setStatusBasedOnBPF(formContext);
                }
                
                return;
            }
            optyObject.setBPFStageField(formContext);
            optyObject.setStageSFField(formContext);
            optyObject.setStatusBasedOnBPF(formContext);
            optyObject.setCloseToEmpty(formContext);
            //optyObject.saveIfDirty(executionContext); //getting save popup issue if using this
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.Status).addOnChange((executionContext)=>{
            var optyObject = CRB.CRM.PJ.Opportunity;
            var formContext = executionContext.getFormContext();
            
            var bpfState = formContext.ui.process.getDisplayState();
            if(bpfState === "floating"){
                formContext.ui.process.setDisplayState('collapsed');
            }

            optyObject.setStageSFBasedOnStatus(formContext);
            optyObject.autoMoveBPFForMigratedRecords(executionContext); //this should only be called after setStageSFBasedOnStatus() here
            optyObject.setStatusBasedOnBPF(formContext);    // this is called to keep status in sync with BPF stage after auto movement
        });
        
        formContext.getAttribute(this.Attributes.Opportunity.CloseNew).addOnChange((executionContext)=>{
            var formContext = executionContext.getFormContext();
            var optyObject = CRB.CRM.PJ.Opportunity;

            optyObject.setStatusBasedOnClose(formContext);
        })
        
        return true;
    },
    setMigratedRecordBPF: async function(executionContext){
        var formContext = executionContext.getFormContext();
        var currentProcess = formContext.data.process.getActiveProcess();
        
        if(currentProcess){
            var currentProcessId = currentProcess.getId();
            if(currentProcessId === (this.BPFIds.CRBPartnerOnboardingMigration).toLowerCase()){
                this.autoMoveBPFForMigratedRecords(executionContext);
                //this.setBPFStageField(formContext);
                //this.setStatusBasedOnBPF(formContext);
                return false;
            }
            else {
                await formContext.data.process.setActiveProcess(this.BPFIds.CRBPartnerOnboardingMigration, (result) => {
                    //var activeProcess = formContext.data.process.getActiveProcess();
                    //this.autoMoveBPFForMigratedRecords(executionContext);
                });
            }
        }
        else{
            await formContext.data.process.setActiveProcess(this.BPFIds.CRBPartnerOnboardingMigration, (result)=>{
                //var activeProcess = formContext.data.process.getActiveProcess();
                //this.autoMoveBPFForMigratedRecords(executionContext);
            });
        }
        
        return true;

    },
    autoMoveBPFForMigratedRecords: function (executionContext) {
        var formContext = executionContext.getFormContext();
        
//        var bpfStage = formContext.getAttribute(this.Attributes.Opportunity.BPFStage).getValue();
//
//        if(bpfStage){
//            return; //bpfstage will not be null/empty once migrated record first time reaches the desired BPF Stage
//        }
        
        var optyType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        var stagesf = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
        if (optyType && stagesf) {
            var sequence = {
                "Assessment": 1,
                "Negotiation": 2,
                "Onboarding": 3,
                "Completion": 4,
                "Closed Won": 5,
                "Closed Lost": 5,    //these three have same sequence as they are rendered dynamically
                "Closed Decline": 5,
            }

            var depth = 10;

            this.changeBPFStageBasedOnStageField(executionContext, sequence, depth);
            
            //this.setBPFStageField(formContext);
            //this.setStatusBasedOnBPF(formContext);
            
            
        }
    },
    changeBPFStageBasedOnStageField: function (executionContext, sequence, depth) {
        var formContext = executionContext.getFormContext();
        var fieldControl = formContext.getAttribute(this.Attributes.Opportunity.stagesf);
        var fieldLabel = fieldControl.getText();
        var currentProcess = formContext.data.process.getActiveProcess();
        if(!currentProcess){
            return;
        }
        
        var stage = formContext.data.process.getActiveStage();

        if(!stage){
            return;
        }
        
        var currentStage = formContext.data.process.getActiveStage().getName();

        

        if (fieldLabel === currentStage || depth === 0) {
            this.localVariables.isAutoBPFJump = false;
            //this.setBPFStageField(formContext);
            return;
        }

        this.localVariables.isAutoBPFJump = true;
        //Saving as moveNext(),movePrevious() are not working without Saving the form
        formContext.data.save().then(() => {



            if (fieldLabel !== currentStage && sequence[fieldLabel] === sequence[currentStage]) {
                
                formContext.data.process.movePrevious(() => {
                    
                    formContext.data.process.moveNext(() => {
                        this.changeBPFStageBasedOnStageField(executionContext, sequence, --depth);
                    });
                });
            }

            var x = sequence[currentStage]; // added to be helpfull while debugging
            var y = sequence[fieldLabel];   // added to be helpfull while debugging

            var fieldValue = fieldControl.getValue();
            if (sequence[currentStage] < sequence[fieldLabel]) {
                //await formContext.data.process.moveNext();
                
                formContext.data.process.moveNext(() => {
                    this.changeBPFStageBasedOnStageField(executionContext, sequence, --depth);
                });
            }

            if (sequence[currentStage] > sequence[fieldLabel]) {
                //await formContext.data.process.movePrevious();
                
                formContext.data.process.movePrevious(() => {
                    this.changeBPFStageBasedOnStageField(executionContext, sequence, --depth);
                });
            }
            //changeBPFStageBasedOnStageField(executionContext,sequence);
        },
            (error) => {

            })
    },
    makeAllFieldsOptionalForMigratedRecords: function(executionContext){
        var formContext = executionContext.getFormContext();
        var fields = formContext.data.entity.attributes.get();
        fields.forEach(field => {
            field.setRequiredLevel("none");
        });
    },
    isLegacyProcessSet:async function(executionContext){
        var isLegacyProcessCode = 1108;
        var selectQuery = "?$select=crb_value";
        var filterQuery = "&$filter=crb_code eq " + isLegacyProcessCode;
        var query = selectQuery + filterQuery;
        var result = await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", query);
        if(result.entities.length > 0){
            return result.entities[0].crb_value;
        }
        return false;
    },
    checkAndSetClassicBPF:async function(executionContext){
        var formContext = executionContext.getFormContext();
        var currentProcess = formContext.data.process.getActiveProcess();
        if(currentProcess){
            var processId = currentProcess.getId().replace("{","").replace("}","");
            if(processId.toLowerCase() === (this.BPFIds.CRBPartnerOnboarding).toLowerCase()){
                return;
            }
            else{
                await formContext.data.process.setActiveProcess(this.BPFIds.CRBPartnerOnboarding);
            }
        }
        else{
            await formContext.data.process.setActiveProcess(this.BPFIds.CRBPartnerOnboarding);
        }
    },
    hideAllBPF: function(formContext){
        formContext.ui.process.setVisible(false);   //this will hide currently displayed BPF
    },
    makeBPFFieldsReadOnly: function(formContext){
        var optyObject = CRB.CRM.PJ.Opportunity;
        var bpfFields = [optyObject.Attributes.Opportunity.stagesf];
        // status field in BPF will be editable
        bpfFields.forEach((field)=>{
            var controls = formContext.getAttribute(field).controls.get();
            controls.forEach(control=>{
                var controlName = control.getName();
                if(controlName && controlName.includes("header_process_")){
                    control.setDisabled(true);
                }
            })
        })
    },
    setBPFStageField: function(formContext){
        var optyObject = CRB.CRM.PJ.Opportunity;
        var stage = formContext.data.process.getActiveStage();
        if(!stage){
            return;
        }
        var currentStageLabel = formContext.data.process.getActiveStage().getName();
        var currentBPFStageValue = formContext.getAttribute(optyObject.Attributes.Opportunity.BPFStage).getValue();
        if(currentBPFStageValue !== currentStageLabel){
            formContext.getAttribute(optyObject.Attributes.Opportunity.BPFStage).setValue(currentStageLabel);
        }
    },
    setStageSFField: function(formContext){
        var optyObject = CRB.CRM.PJ.Opportunity;

        var isTriggeredByAutoBPFJump = optyObject.localVariables.isAutoBPFJump;
        if(isTriggeredByAutoBPFJump){
            return;
        }
        
        var stage = formContext.data.process.getActiveStage();
        if(!stage){
            return;
        }

        var currentStageLabel = formContext.data.process.getActiveStage().getName();
        var stageSFOptions = formContext.getAttribute(optyObject.Attributes.Opportunity.stagesf).getOptions();
        var requiredOptionValue;
        requiredOptionValue = stageSFOptions.find(option=>option.text === currentStageLabel);
        formContext.getAttribute(optyObject.Attributes.Opportunity.stagesf).setValue(requiredOptionValue.value);
    },
    setStatusBasedOnBPF: function(formContext){ //for ETB records
        var optyObject = CRB.CRM.PJ.Opportunity;
        var currentStageLabel = formContext.data.process.getActiveStage().getName();
        var statusControl = formContext.getAttribute(optyObject.Attributes.Opportunity.Status).controls.get("header_"+optyObject.Attributes.Opportunity.Status);
        if(!statusControl){
            return;
        }
        var statusField = statusControl.getAttribute();
        if(statusField){
            var statusValue = statusField.getValue();
            var inProgressStages = [optyObject.ETBBPFStageLabels.Assessment,optyObject.ETBBPFStageLabels.Negotiation,optyObject.ETBBPFStageLabels.Onboarding];
            if(inProgressStages.includes(currentStageLabel) && statusValue !== optyObject.Attributes.LOV.Status.InProgress){
                statusField.setValue(optyObject.Attributes.LOV.Status.InProgress);
                //statusField.fireOnChange();
            }
            if(currentStageLabel === optyObject.ETBBPFStageLabels.Completion){
                statusField.setValue(optyObject.Attributes.LOV.Status.Complete);
                //statusField.fireOnChange();
            }
            if(currentStageLabel === optyObject.ETBBPFStageLabels.ClosedWon && statusValue !== optyObject.Attributes.LOV.Status.ClosedWon){
                statusField.setValue(optyObject.Attributes.LOV.Status.ClosedWon);
                //statusField.fireOnChange();
            }
            if(currentStageLabel === optyObject.ETBBPFStageLabels.ClosedLost && statusValue !== optyObject.Attributes.LOV.Status.ClosedLost){
                statusField.setValue(optyObject.Attributes.LOV.Status.ClosedLost);
                //statusField.fireOnChange();
            }
            if(currentStageLabel === optyObject.ETBBPFStageLabels.ClosedDecline && statusValue !== optyObject.Attributes.LOV.Status.ClosedDecline){
                statusField.setValue(optyObject.Attributes.LOV.Status.ClosedDecline);
                //statusField.fireOnChange();
            }
        }
    },
    setStageSFBasedOnStatus: function (formContext) {
        //this is only for 'Closed Won/Lost/Decline' to show BPF stages dynamically
        var status = formContext.getAttribute(this.Attributes.Opportunity.Status);
        var stageSF = formContext.getAttribute(this.Attributes.Opportunity.stagesf);
        if (status && stageSF) {
            var statusValue = status.getValue();
            var statusLabel = status.getText();
             var applicableStatusValues = [this.Attributes.LOV.Status.ClosedWon, this.Attributes.LOV.Status.ClosedLost, this.Attributes.LOV.Status.ClosedDecline];

             if (!applicableStatusValues.includes(statusValue)) {
                 return;
             }
             
             if(statusValue === this.Attributes.LOV.Status.ClosedDecline){
                statusLabel = "Closed Decline"; //doing this as CLosed Decline label in status field is Closed Declined
            }

            var stageSFControls = formContext.getControl(this.Attributes.Opportunity.stagesf).getOptions();
            var stageSFOption = stageSFControls.find((option) => option.text === statusLabel);

            var StageSfValue = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
            if (StageSfValue !== stageSFOption.value) {
                stageSF.setValue(stageSFOption.value);
            }

        }
    },
    filterOptionsFromETBBPFStatus: function (formContext) {
        var optyObject = CRB.CRM.PJ.Opportunity;
        var statusControls = formContext.getAttribute(optyObject.Attributes.Opportunity.Status).controls.get();

        statusControls.forEach((control)=>{
            if(control.getName().includes("header_process_")){
                var options = formContext.getControl(control.getName()).getOptions();
                formContext.getControl(control.getName()).clearOptions();
                options.forEach((option)=>{
                    var requiredOptions = [optyObject.Attributes.LOV.Status.ClosedWon,optyObject.Attributes.LOV.Status.ClosedLost,optyObject.Attributes.LOV.Status.ClosedDecline];
                    if(requiredOptions.includes(option.value)){
                        formContext.getControl(control.getName()).addOption(option);
                    }
                })
            }
        })
    },
    showHideTabsForETBRecords: function (formContext){
        var tabsToShow = [this.TabName.LegacyOpportunity,this.TabName.ETBOpportunityInformation];
        //var tabsToHide = [];

        var tabs = formContext.ui.tabs.get();

        tabs.forEach((tab)=>{
            if(tabsToShow.includes(tab.getName())){
                formContext.ui.tabs.get(tab.getName()).setVisible(true);
            }
            else{
                formContext.ui.tabs.get(tab.getName()).setVisible(false);
            }
        })
    },
    setStatusBasedOnClose:function(formContext){
        var closeControl = formContext.getControl("header_process_" + this.Attributes.Opportunity.CloseNew);
        var statusControl = formContext.getControl("header_" + this.Attributes.Opportunity.Status);

        if(!closeControl || !statusControl){
            return;
        }

        var closeNewOptions = {
           //"100000002": "Closed Won",
            "100000001": "Closed Lost",
            "100000000": "Closed Declined",
        }

        var closeOptionLabel = closeControl.getAttribute().getText();
        var statusOptionLabel = statusControl.getAttribute().getText();
        var closeOptionValue = closeControl.getAttribute().getValue();

        var statusOptions = statusControl.getOptions();
        //var statusOption = statusOptions.find(option => option.text === closeOptionLabel);
        var statusOption = statusOptions.find(option => option.text === closeNewOptions[closeOptionValue]);

        if(statusOption){
            statusControl.getAttribute().setValue(statusOption.value);
            statusControl.getAttribute().fireOnChange();
        }
    },
    addClosedWonToClose:function(formContext){
        var closeControl = formContext.getControl("header_process_" + this.Attributes.Opportunity.CloseNew);
        if (!closeControl) {
            return;
        }
        var closeOptions = closeControl.getOptions();
        var closedWonOption = closeOptions.filter(option => option.text === "Closed Won");
        if(closedWonOption.length === 0){
            var closedWonValue = closeOptions[(closeOptions.length - 1)].value + 1;
            closeControl.addOption({value:closedWonValue,text:"Closed Won"});
        }
    },
    removeOnSaveFunctionsForETB: function (formContext) {
        formContext.data.entity.removeOnSave(this.hidingofSubstatus);
    },
    setCloseToEmpty: function(formContext){
        var isAutoBPFChange = this.localVariables.isAutoBPFJump;
        if(isAutoBPFChange){
            return;
        }
        
        var excludedStages = [this.ETBBPFStageLabels.ClosedLost,this.ETBBPFStageLabels.ClosedDecline];
        var currentStage = formContext.data.process.getActiveStage().getName();
        var closeControl = formContext.getControl("header_process_" + this.Attributes.Opportunity.CloseNew);

        if(!excludedStages.includes(currentStage)){
            closeControl.getAttribute().setValue(null);
        }


    },
    saveIfDirty: function(executionContext) {
        var formContext = executionContext.getFormContext();
        if (formContext.data.entity.getIsDirty()) {
            formContext.data.entity.save();
            
        } else {
            
        }
    },
    opportunityQuickCreate: function(executionContext){
         var formContext = executionContext.getFormContext();
         formContext.getControl(this.Attributes.Opportunity.OpportunityTopic).setDisabled(false);
    },
    HideCloneOpportunitytButton: function (primaryControl) {
    //var formContext = executionContext.getFormContext();
    var formContext = primaryControl;
    var formName = Xrm.Page.ui.formSelector.getCurrentItem().getLabel();
    if(formName == "CRB Opportunity"){
        return true;
    }
    else{
    return false;
    }
       
},
    ExecuteGenerateTermSheet: function (formContext) {
        var name = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityName).getValue();
        //var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType).getValue()[0].name;
        var confirmStrings = {
            text: "Executed Termsheet Generation for Opportunity:" + " " + name,
            title: "TermSheet 📄",
            confirmButtonLabel: "Yes",
            cancelButtonLabel: "No"
        };
        var confirmOptions = {
            height: Math.min(200 + (confirmStrings.text.length / 50) * 20, 600),
            width: Math.min(350 + (confirmStrings.text.length / 50) * 10, 800)
        };
        Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
            function (success) {
                if (success.confirmed) {
                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.GenerateTermSheet).setValue(true);
                    formContext.data.entity.save();
                    Xrm.Utility.showProgressIndicator("Generating TermSheet...");
                    setTimeout(() => {
                        Xrm.Utility.closeProgressIndicator();
                    }, 6000);
                }
                else {
                    saveEvent.preventDefault();
                }
            }
        );
    },
    settingPPSoftDefaultValues: async function (executionContext) {
        "use strict";
        var formContext = executionContext.getFormContext();
        if (formContext !== null) {
            var value;
            var valueJson;
            await Xrm.WebApi.retrieveMultipleRecords("crb_configuration", "?$select=crb_value&$filter=crb_code eq 1231").then((result) => {
                value = result.entities[0]["crb_value"];
                valueJson = JSON.parse(value);
            })
            if (formContext.getAttribute(this.Attributes.Opportunity.programOneTimeFee).getValue() === null) {
                formContext.getAttribute(this.Attributes.Opportunity.programOneTimeFee).setValue(valueJson["crb_programonetimefee"]);
            }
            if (formContext.getAttribute(this.Attributes.Opportunity.programFeeDiscount).getValue() === null) {
                formContext.getAttribute(this.Attributes.Opportunity.programFeeDiscount).setValue(valueJson["crb_programdiscountfee"]);
            }
            if (formContext.getAttribute(this.Attributes.Opportunity.adHocReportingFee).getValue() === null) {
                formContext.getAttribute(this.Attributes.Opportunity.adHocReportingFee).setValue(valueJson["crb_adhocreportingfee"]);
            }
        }
    },
    PricingProposalButton: async function (PrimaryControl) {
        var formContext = PrimaryControl;
        var ppName = "";
        var templateName = "";
        var ppNamesArray = [];
        var templateNameArray = [];
        var missingPPNamesString = "";
        var topic = formContext.getAttribute("name").getValue();
        var oppId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        await Xrm.WebApi.retrieveMultipleRecords("crb_pricingproposal", "?$select=crb_name&$filter=_crb_opportunity_value eq '" + oppId + "' ").then(
            function success(results) {
                console.log(results);
                for (var i = 0; i < results.entities.length; i++) {
                    var result = results.entities[i];
                    ppName += result["crb_name"] + ",";
                    ppNamesArray.push(result["crb_name"]); // Append to array
                }
                ppName = ppName.slice(0, -2);
                console.log(ppName);
            },
            function (error) {
                console.log(error.message);
            }
        );
        await Xrm.WebApi.retrieveMultipleRecords("personaldocumenttemplate", "?$select=name&$filter=associatedentitytypecode eq 'crb_pricingproposal'").then(
            function success(results) {
                console.log(results);
                for (var i = 0; i < results.entities.length; i++) {
                    var result = results.entities[i];
                    templateName += result["name"] + ",";
                    templateNameArray.push(result["name"]);
                }
                templateName = templateName.slice(0, -1);
                console.log(templateName);
                var missingPPNames = ppNamesArray.filter(pp => !templateNameArray.includes(pp));
                missingPPNamesString = missingPPNames.join(",");
                console.log("Missing PP Names: ", missingPPNamesString);
            },
            function (error) {
                console.log(error.message);
            }
        );
        if (missingPPNamesString !== null && missingPPNamesString !== "") {
            var confirmStrings = { text: "The following Pricing Proposals are missing templates: " + missingPPNamesString + ". Do you want to generate Pricing Proposal ?", title: "Pricing Proposal 📃", confirmButtonLabel: "Yes", cancelButtonLabel: "No", subtitle: "Pricing Proposal For " + topic };
            var confirmOptions = { height: 350, width: 500 };
            Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
                function (success) {
                    if (success.confirmed) {
                        Xrm.Utility.showProgressIndicator("Generating Pricing Proposal...");
                        formContext.getAttribute("crb_generatepricingproposal").setValue(true);
                        formContext.data.save();
                        setTimeout(function () {
                            Xrm.Utility.closeProgressIndicator();
                        }, 5000);
                    }
                    else {
                        //formContext.getAttribute("crb_generatepricingproposal").setValue(false);
                        saveEvent.preventDefault();
                    }
                });
        }
        else if (missingPPNamesString === null || missingPPNamesString === "") {
            var confirmStrings = { text: "Do you want to generate Pricing Proposal ?", title: "Pricing Proposal 📃", confirmButtonLabel: "Yes", cancelButtonLabel: "No", subtitle: "Pricing Proposal For " + topic };
            var confirmOptions = { height: 250, width: 450 };
            Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
                function (success) {
                    if (success.confirmed) {
                        Xrm.Utility.showProgressIndicator("Generating Pricing Proposal...");
                        formContext.getAttribute("crb_generatepricingproposal").setValue(true);
                        formContext.data.save();
                        setTimeout(function () {
                            Xrm.Utility.closeProgressIndicator();
                        }, 5000);
                    }
                    else {
                        //formContext.getAttribute("crb_generatepricingproposal").setValue(false);
                        saveEvent.preventDefault();
                    }
                });
        }
    },
    SetPartnerAddressAndBaasProductNames: async function (executionContext) {
        var formContext = executionContext.getFormContext();
        var baasProductname = "";
        var baasProductnameArray = [];
        var opportunityId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        if (opportunityId) {
            var partnerId = formContext.getAttribute(this.Attributes.Opportunity.partnerId).getValue()[0].id.replace("{", "").replace("}", "");
            if (partnerId) {
                await Xrm.WebApi.retrieveRecord("account", partnerId, "?$select=crb_legalentityaddress").then(
                    function success(result) {
                        console.log(result);
                        var legalEntityAddress = result["crb_legalentityaddress"];
                        Xrm.WebApi.retrieveMultipleRecords("crb_product", "?$select=crb_name&$filter=(_crb_opportunity_value eq '" + opportunityId + "' and _crb_lineofbusiness_value eq c9c34eb5-69dc-ee11-904c-000d3a1c40a7)").then(
                            function success(results) {
                                console.log(results);
                                for (var i = 0; i < results.entities.length; i++) {
                                    var result = results.entities[i];
                                    baasProductname += result["crb_name"] + ",";
                                    baasProductnameArray.push(result["crb_name"]);
                                }
                                baasProductname = baasProductname.replace(/,/g, ', ');
                                baasProductname = baasProductname.slice(0, -1);
                                //alert(baasProductname);
                                if (baasProductname && legalEntityAddress) {
                                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.partnerAddress).setValue(legalEntityAddress);
                                    formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.BaasProductList).setValue(baasProductname);
                                }
                            },
                            function (error) {
                                console.log(error.message);
                            }
                        );
                    },
                    function (error) {
                        console.log(error.message);
                    }
                );
            }
        }
    },
    togglePricingProposalButton: function (primaryControl) {
        "use strict";
        //var formContext = executionContext.getFormContext();
        var formContext = primaryControl;
        var contractInFocus = formContext.ui.tabs.get("Pricing Proposal").getDisplayState();
        if (contractInFocus === "expanded") {
            return true
        }
        else {
            return false
        }
        //formContext.ui.refreshRibbon();
    },
    toggleTermSheetButton: function (primaryControl) {
        "use strict";
        //var formContext = executionContext.getFormContext();
        var formContext = primaryControl;
        var contractInFocus = formContext.ui.tabs.get("Term Sheet").getDisplayState();
        if (contractInFocus === "expanded") {
            return true
        }
        else {
            return false
        }
    },
    OnTabCHange: function (executionContext) {
        var formContext = executionContext.getFormContext();
        formContext.ui.refreshRibbon();
    },
    SetPayemtProductList: async function (executionContext) {
        var formContext = executionContext.getFormContext();
        var paymentProductname = "";
        var paymentProductnameArray = [];
        var opportunityId = formContext.data.entity.getId().replace("{", "").replace("}", "");
        if (opportunityId) {
            await Xrm.WebApi.retrieveMultipleRecords("crb_product", "?$select=crb_name&$filter=(_crb_opportunity_value eq '" + opportunityId + "' and _crb_lineofbusiness_value eq 6b41bec1-69dc-ee11-904d-0022482a4ba4)").then(
                function success(results) {
                    console.log(results);
                    for (var i = 0; i < results.entities.length; i++) {
                        var result = results.entities[i];
                        paymentProductname += result["crb_name"] + ",";
                        paymentProductnameArray.push(result["crb_name"]);
                    }
                    paymentProductname = paymentProductname.replace(/,/g, ', ');
                    paymentProductname = paymentProductname.slice(0, -2);
                    if (paymentProductname) {
                        formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.PaymentProductList).setValue(paymentProductname);
                    }
                },
                function (error) {
                    console.log(error.message);
                }
            );
        }
    },
    makeBrokerFieldMandatory: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType).getValue();
        var sourceValue = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Source).getValue();
        var broker = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Broker);
        if (opportunityType !== null && opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase() === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SBALending) {
            if (sourceValue !== null && sourceValue === CRB.CRM.PJ.Opportunity.Attributes.LOV.Source.Broker) {
                broker.setRequiredLevel("required");
            } else {
                broker.setRequiredLevel("none");
            }
        }
    },
    updateActionTakenDate: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase() === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SBALending) {
            var actionTakenDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ActionTakenDate);
            var actionTaken = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ActionTaken).getValue();
            if (actionTaken !== null && actionTaken === CRB.CRM.PJ.Opportunity.Attributes.LOV.ActionTaken.Closed) {
                actionTakenDate.setRequiredLevel("required");
                actionTakenDate.setValue(new Date());
            }
            else {
                actionTakenDate.setRequiredLevel("none");
                actionTakenDate.setValue(null);
            }
        }

    },
    updateActionTakentoClosed: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase() === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SBALending) {
            var stageSF = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.stagesf).getValue();
            if (stageSF !== null && stageSF === CRB.CRM.PJ.Opportunity.Attributes.LOV.StageSF.Closed) {
                formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ActionTaken).setValue(CRB.CRM.PJ.Opportunity.Attributes.LOV.ActionTaken.Closed);
                formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ActionTaken).fireOnChange();
            }
        }
    },
    showHideProjectedCloseDate: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType).getValue();
        var projectedClosedDateControl = formContext.getControl(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ProjectedClosedDate);
        if (opportunityType !== null && opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase() === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SBALending) {
            var projectedCloseDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ProjectedClosedDate);
            var applicationDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ApplicationDate).getValue();
            var closeDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.CloseDate).getValue();
            if (applicationDate !== null) {
                projectedClosedDateControl.setVisible(true);
                projectedCloseDate.setValue(closeDate || null);
            }
            else {
                projectedClosedDateControl.setVisible(false);
            }
        }
    },
    registerOnChangeEventsforSBALending: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.OpportunityType);
        var sourceValue = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.Source);
//        opportunityType.addOnChange(this.makeBrokerFieldMandatory);
        sourceValue.addOnChange(this.makeBrokerFieldMandatory);
        var actionTaken = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ActionTaken);
        actionTaken.addOnChange(this.updateActionTakenDate);
        var stageSF = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.stagesf);
        stageSF.addOnChange(this.updateActionTakentoClosed);
        var applicationDate = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.ApplicationDate);
        applicationDate.addOnChange(this.showHideProjectedCloseDate);
        applicationDate.addOnChange(this.enableAndDisableThirdPartySection);
    },
    showandHideLostOpportunityFieldsCapitalMarket: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var process = formContext.data.process.getActiveProcess();
        if (!process) {
            return
        }
        var optyObject = CRB.CRM.PJ.Opportunity;
        var stageSF = formContext.getAttribute(optyObject.Attributes.Opportunity.stagesf).getValue();
        var bpfStage = formContext.data.process.getActiveStage();
        var opportunityLostReasons = formContext.getControl(optyObject.Attributes.Opportunity.OpportunityLostReasons);
        var lostOrPassReasons = formContext.getControl(optyObject.Attributes.Opportunity.LostorPassReasonComments);
        var currentStageName = bpfStage.getName();
        if (stageSF === optyObject.Attributes.LOV.StageSF.ClosedLost && currentStageName == optyObject.Attributes.LOV.BPFStages.ClosedLost) {
            opportunityLostReasons.setVisible(true);
            lostOrPassReasons.setVisible(true);
        }
        else {
            opportunityLostReasons.setVisible(false);
            lostOrPassReasons.setVisible(false);
        }
    },
   setFormBasedOnOpportunityType: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var formType = formContext.ui.getFormType();
        if (formContext.getAttribute("crb_opportunitytype").getValue() != null && formType != this.FormType.CreateForm) {
            var opportunityType = formContext.getAttribute("crb_opportunitytype").getValue();
            var opportunityTypeId = opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase();
            let requiredFormFound = false;
            if (formContext.getAttribute(this.Attributes.Opportunity.opportunitysfidtext).getValue() !== null && (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.BaaSCards || opportunityTypeId === this.Attributes.LOV.lineOfBusiness.Marketplace_Lending || opportunityTypeId === this.Attributes.LOV.lineOfBusiness.Payments)) {
                var targetFormName = this.FormName.SFOpportunity;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: SF Opportunities");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else if (formContext.getAttribute(this.Attributes.Opportunity.opportunitysfidtext).getValue() === null && (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.BaaSCards || opportunityTypeId === this.Attributes.LOV.lineOfBusiness.Marketplace_Lending || opportunityTypeId === this.Attributes.LOV.lineOfBusiness.Payments)) {
                var targetFormName = this.FormName.CRBOpportunity;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: CRB Opportunity");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else if (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.DigitalBanking) {
                var targetFormName = this.FormName.DigitalBanking;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: Digital Banking");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else if (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.SBALending) {
                var targetFormName = this.FormName.SBALending;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: SBA Lending");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else if (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.SDL) {
                var targetFormName = this.FormName.SDL;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: SDL");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else if (opportunityTypeId === this.Attributes.LOV.lineOfBusiness.CapitalMarkets) {
                var targetFormName = this.FormName.CapitalMarkets;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: Capital Markets");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            } else {
                var targetFormName = this.FormName.SFOpportunity;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: SF Opportunities");
                            requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } else {
                    requiredFormFound = true;
                }
            }

            if (!requiredFormFound) {
                //alert("No matching form found for the Opportunity Type");
                let alertStrings = {
                    confirmButtonLabel: 'Ok',
                    text: `No matching form found for the Opportunity Type of ${opportunityType[0].name} forms`
                };
                let alertOptions = {
                    height: 120,
                    width: 260
                };

                Xrm.Navigation.openAlertDialog(alertStrings, alertOptions);
            }
        }
        else{
            var targetFormName = this.FormName.CRBOpportunity;
                var currentFormName = formContext.ui.formSelector.getCurrentItem().getLabel();
                if (currentFormName !== targetFormName) {
                    formContext.ui.formSelector.items.forEach(function (form) {
                        if (form.getLabel() === targetFormName) {
                            //writeToConsole("FormIdentified: CRB Opportunity");
                            //requiredFormFound = true;
                            form.navigate();
                        }
                    });
                } 
        }
    },
    filterStageSFOptions: function(executionContext, optionToShow){
        // filtering stagesf options based on form

        var formContext = executionContext.getFormContext();
        var formId = formContext.ui.formSelector.getCurrentItem().getId();
        formId = formId.toUpperCase();
        var formIdObj = CRB.CRM.PJ.Opportunity.FormIds;

        var stageSFOptions = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.stagesf).getOptions();

        var stagesfControls = formContext.getAttribute(CRB.CRM.PJ.Opportunity.Attributes.Opportunity.stagesf).controls.get();
        stagesfControls.forEach((control)=>{
            formContext.getControl(control.getName()).clearOptions();
            optionToShow.forEach((option)=>{
                var requiredOption = stageSFOptions.find((stageOption)=>stageOption.value === option);
                if(requiredOption){
                    formContext.getControl(control.getName()).addOption(requiredOption);
                }
            })
        });
    },
    
    calculateGainOnSale$AndValuationAllowanceRelease$: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var gainOnSaleIn$ = formContext.getAttribute(optyObject.Attributes.Opportunity.GainOnSalein$);
    var valuationAllowanceRelease$ = formContext.getAttribute(optyObject.Attributes.Opportunity.ValuationAllowanceRelease);
    var price = formContext.getAttribute(optyObject.Attributes.Opportunity.Price).getValue();
    var cost = formContext.getAttribute(optyObject.Attributes.Opportunity.Cost).getValue();
    var principalBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.PrincipalBalance).getValue();
    var locomPrice = formContext.getAttribute(optyObject.Attributes.Opportunity.LocomPrice).getValue();
    if (price !== null && cost !== null && principalBalance !== null) {
        calculateGainOnSale$(gainOnSaleIn$, price, cost, principalBalance);
        calculateValuationAllowanceRelease$(valuationAllowanceRelease$, price, cost, locomPrice, principalBalance);
    } else {
        gainOnSaleIn$.setValue(null);
        valuationAllowanceRelease$.setValue(null);
    }
},

calculateGainOnSale$: function (gainOnSaleIn$, price, cost, principalBalance) {
    if (price > cost) {
        gainOnSaleIn$.setValue((price - cost) * principalBalance);
    } else {
        gainOnSaleIn$.setValue(0);
    }
},
calculateValuationAllowanceRelease$: function (valuationAllowanceRelease$, price, cost, locomPrice, principalBalance) {
    if (locomPrice !== null) {
        if (price > cost) {
            valuationAllowanceRelease$.setValue((cost - locomPrice) * principalBalance);
        } else {
            valuationAllowanceRelease$.setValue((price - locomPrice) * principalBalance);
        }

    }
},
    registerOnChangeEventsforCapitalMarket: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var optyObject = CRB.CRM.PJ.Opportunity;
        const reqFields = [optyObject.Attributes.Opportunity.Price, optyObject.Attributes.Opportunity.Cost, optyObject.Attributes.Opportunity.PrincipalBalance, optyObject.Attributes.Opportunity.LocomPrice, optyObject.Attributes.Opportunity.FMV];
        reqFields.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateGainOnSale$AndValuationAllowanceRelease$);
        });
        const fieldsForNetProceedsAndCollatAccrued = [optyObject.Attributes.Opportunity.CollateralBalance, optyObject.Attributes.Opportunity.NetExecution, optyObject.Attributes.Opportunity.AccruedInterest];
        fieldsForNetProceedsAndCollatAccrued.forEach(field => {
            formContext.getAttribute(field).addOnChange(this.updateNetProceedsAndCollatandAccrued);
            formContext.getAttribute(field).addOnChange(this.calculateGrossExecution);
            formContext.getAttribute(field).addOnChange(this.calculateNetExecutionexAccruedInterest);
        });
        const fieldsForGrossExecution = [optyObject.Attributes.Opportunity.GrossProceeds, optyObject.Attributes.Opportunity.CollatAndAccrued];
        fieldsForGrossExecution.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateGrossExecution);
        });
        const fieldsForMarktoFMV = [optyObject.Attributes.Opportunity.HFS, optyObject.Attributes.Opportunity.PrincipalBalance, optyObject.Attributes.Opportunity.Cost, optyObject.Attributes.Opportunity.LocomPrice, optyObject.Attributes.Opportunity.FMV];
        fieldsForMarktoFMV.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateMarkToFMV);
        });
        const fieldsForLocomPrice = [optyObject.Attributes.Opportunity.FMV, optyObject.Attributes.Opportunity.Cost];
        fieldsForLocomPrice.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateLoComPrice);
        });
        const fieldsForGainOnSaleAndNetExecutionOverPar = [optyObject.Attributes.Opportunity.CollateralBalance, optyObject.Attributes.Opportunity.NetExecution];
        fieldsForGainOnSaleAndNetExecutionOverPar.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateGainonSalesAndNetExecutionOverPar);
        });
        formContext.getAttribute(optyObject.Attributes.Opportunity.PeerIQSituation).addOnChange(this.calculatePeerIQFeesRate);
        const fieldsForEstimatedPIQSituation = [optyObject.Attributes.Opportunity.CollateralBalance, optyObject.Attributes.Opportunity.PeerIQFeeRate, optyObject.Attributes.Opportunity.PeerIQSituation];
        fieldsForEstimatedPIQSituation.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateEstimatedPIQFees);
        });
        const fieldsForClosingWirestoCRB = [optyObject.Attributes.Opportunity.RetentionFromSecuritizations, optyObject.Attributes.Opportunity.TrueUPsNetted, optyObject.Attributes.Opportunity.NetProceeds];
        fieldsForClosingWirestoCRB.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateClosingWireToCRB);
        });
        const fieldsForNetExecutionExAccruedinterest = [optyObject.Attributes.Opportunity.NetProceeds, optyObject.Attributes.Opportunity.AccruedInterest, optyObject.Attributes.Opportunity.NetExecution, optyObject.Attributes.Opportunity.CollatAndAccrued];
        fieldsForNetExecutionExAccruedinterest.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateNetExecutionexAccruedInterest);
        formContext.getAttribute(field).addOnChange(this.calculateWeightExAccruedInterest);
        });
        const fieldsForWeightExAccruedInterest = [optyObject.Attributes.Opportunity.CollateralBalance, optyObject.Attributes.Opportunity.NetExecutionExAccruedinterest];
        fieldsForWeightExAccruedInterest.forEach(field => {
        formContext.getAttribute(field).addOnChange(this.calculateWeightExAccruedInterest);
        });
        formContext.getAttribute(optyObject.Attributes.Opportunity.CloseDate).addOnChange(this.calculateTplus3AndTplus20);
    },
updateNetProceedsAndCollatandAccrued: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var netProceeds = formContext.getAttribute(optyObject.Attributes.Opportunity.NetProceeds);
    var collateralBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.CollateralBalance).getValue();
    var netExecution = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecution).getValue();
    var accruedInterest = formContext.getAttribute(optyObject.Attributes.Opportunity.AccruedInterest).getValue();
    if (collateralBalance !== null && netExecution !== null && accruedInterest !== null) {
        netProceeds.setValue((collateralBalance * netExecution + accruedInterest) * 100);
    } else {
        netProceeds.setValue(null);
    }
    var collatAndAccrued = formContext.getAttribute(optyObject.Attributes.Opportunity.CollatAndAccrued);
    if (collateralBalance !== null && accruedInterest !== null) {
        collatAndAccrued.setValue(collateralBalance + accruedInterest);
    } else {
        collatAndAccrued.setValue(null);
    }
    
}, 
    loadBPFDynamically: function(executionContext){
        var formContext = executionContext.getFormContext();
        var bpdToLoadId = this.getBPFIdBasedOnOpportunityType(formContext);
        var activeProcess = formContext.data.process.getActiveProcess();
        if(!activeProcess){
            return;
        }
        if(bpdToLoadId){
            var currentProcessId = formContext.data.process.getActiveProcess().getId().replace("{","").replace("}","");
            if(currentProcessId.toLowerCase() === bpdToLoadId.toLowerCase()){
                return;
            }
            else{
                formContext.data.process.setActiveProcess(bpdToLoadId);
            }
        }
        else{
            this.hideAllBPFs(executionContext);
        }
    },
    getBPFIdBasedOnOpportunityType: function(formContext) {
        var formType = formContext.ui.getFormType();
        var processIdToLoad = null;
        var optyType = this.Attributes.Opportunity.OpportunityType;
        var optySFIdText = this.Attributes.Opportunity.opportunitysfidtext;
        var optySFIdTextValue = formContext.getAttribute(optySFIdText).getValue();
        var lobIdsLOV = this.Attributes.LOV.lineOfBusiness;
        var formId = formContext.ui.formSelector.getCurrentItem().getId().toUpperCase();
        var formIdLOV = this.FormIds;

        if (formType === this.FormType.CreateForm) {
            switch (formId) {
                case formIdLOV.CRBOpportunity:
                    processIdToLoad = this.BPFIds.CRBPartnerOnboarding;
                    break;
                case formIdLOV.CapitalMarkets:
                    processIdToLoad = this.BPFIds.CapitalMarkets;
                    break;
                case formIdLOV.DigitalBanking:
                    processIdToLoad = this.BPFIds.DigitalBanking;
                    break;
                case formIdLOV.SBALending:
                    processIdToLoad = this.BPFIds.SBALending;
                    break;
                case formIdLOV.SDL:
                    processIdToLoad = this.BPFIds.SDL;
                    break; 
            }
        }
        else if (formType === this.FormType.UpdateForm) {
            if (formContext.getAttribute(optyType).getValue() != null) {
                var opportunityType = formContext.getAttribute(optyType).getValue();
                var opportunityTypeId = opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase();

                switch (opportunityTypeId) {
                    case lobIdsLOV.CapitalMarkets:
                        processIdToLoad = this.BPFIds.CapitalMarkets;
                        break;
                    case lobIdsLOV.DigitalBanking:
                        processIdToLoad = this.BPFIds.DigitalBanking;
                        break;
                    case lobIdsLOV.SBALending:
                        processIdToLoad = this.BPFIds.SBALending;
                        break;
                    case lobIdsLOV.SDL:
                        processIdToLoad = this.BPFIds.SDL;
                        break;
                }
                
                if ((opportunityTypeId === lobIdsLOV.BaaSCards || opportunityTypeId === lobIdsLOV.Marketplace_Lending || opportunityTypeId === lobIdsLOV.Payments) && optySFIdTextValue) {
                    processIdToLoad = this.BPFIds.CRBPartnerOnboardingMigration;
                }
                if ((opportunityTypeId === lobIdsLOV.BaaSCards || opportunityTypeId === lobIdsLOV.Marketplace_Lending || opportunityTypeId === lobIdsLOV.Payments) && !optySFIdTextValue) {
                    processIdToLoad = this.BPFIds.CRBPartnerOnboarding;
                }

            }
            else{
                switch (formId) {
                    case formIdLOV.CRBOpportunity:
                        processIdToLoad = this.BPFIds.CRBPartnerOnboarding;
                        break;
                    case formIdLOV.CapitalMarkets:
                        processIdToLoad = this.BPFIds.CapitalMarkets;
                        break;
                    case formIdLOV.DigitalBanking:
                        processIdToLoad = this.BPFIds.DigitalBanking;
                        break;
                    case formIdLOV.SBALending:
                        processIdToLoad = this.BPFIds.SBALending;
                        break;
                    case formIdLOV.SDL:
                        processIdToLoad = this.BPFIds.SDL;
                        break; 
                }
            }
        }
        return processIdToLoad;
    },
    hideAllBPFs: function(executionContext) {
        //debugger;
        var formContext = executionContext.getFormContext();
        var processControl = formContext.data.process;
        if (processControl != null && processControl.getActiveProcess() != null) {
            formContext.ui.process.setVisible(false);
        }
    },
    autoMoveBPF: function (executionContext,sequence) {
        var formContext = executionContext.getFormContext();
        var optyType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        var stagesf = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
        if (optyType && stagesf) {
            
            if(optyType[0].id === this.Attributes.LOV.lineOfBusiness.SBALending && stagesf === this.Attributes.LOV.StageSF.Closed){
                return;
            }
            
            var depth = 10;

            this.changeBPFStageBasedOnStageField(executionContext, sequence, depth);

            //this.setBPFStageField(formContext);
            //this.setStatusBasedOnBPF(formContext);
            
        }
    },
    calculateGrossExecution: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var grossExecution = formContext.getAttribute(optyObject.Attributes.Opportunity.GrossExecution);
    var grossProceeds = formContext.getAttribute(optyObject.Attributes.Opportunity.GrossProceeds).getValue();
    var collatAndAccrued = formContext.getAttribute(optyObject.Attributes.Opportunity.CollatAndAccrued).getValue();
    if (grossProceeds !== null && collatAndAccrued !== null) {
        grossExecution.setValue(grossProceeds / collatAndAccrued);
    } else {
        grossExecution.setValue(null);
    }
    },
    setStageSfBasedOnClose: function(executionContext){
		var formContext = executionContext.getFormContext();
		var closeAttribute = formContext.getAttribute(this.Attributes.Opportunity.CloseNew);
        var stagesfAttribute = formContext.getAttribute(this.Attributes.Opportunity.stagesf);
		if(!closeAttribute || !stagesfAttribute){
            return;
        }
        
        var closeValue = closeAttribute.getValue();
        if(!closeValue){
            return;
        }

		var closeLabel = closeAttribute.getText();

		if(closeLabel === "Closed Declined"){
			closeLabel = "Closed Decline"; //doing this as Closed Decline label in close field is Closed Declined
		}

        var stageSFOptions = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getOptions();
        var stageSFOption = stageSFOptions.find((option) => option.text === closeLabel);
        if(stagesfAttribute.getValue() !== stageSFOption.value){
            stagesfAttribute.setValue(stageSFOption.value);
            stagesfAttribute.fireOnChange();
        }

	},
    calculateMarkToFMV: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var markToFMV = formContext.getAttribute(optyObject.Attributes.Opportunity.MarkToFMV);
    var hfsInPercent = formContext.getAttribute(optyObject.Attributes.Opportunity.HFS).getValue();
    var principalBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.PrincipalBalance).getValue();
    var cost = formContext.getAttribute(optyObject.Attributes.Opportunity.Cost).getValue();
    var locomPrice = formContext.getAttribute(optyObject.Attributes.Opportunity.LocomPrice).getValue();
    if (hfsInPercent !== null && principalBalance !== null && cost !== null && locomPrice !== null) {
        markToFMV.setValue(((1 - hfsInPercent) * principalBalance * (cost - locomPrice)) * -1);
    } else {
        markToFMV.setValue(null);
    }
    },    
    setCloseToDefault: function(formContext){
        var isAutoBPFChange = this.localVariables.isAutoBPFJump;
        if(isAutoBPFChange){
            return;
        }
        
        var process = formContext.data.process.getActiveProcess();
        if(!process){
            return;
        }
        
        var excludedStages = [this.ETBBPFStageLabels.ClosedLost,this.ETBBPFStageLabels.ClosedDecline];
        var currentStage = formContext.data.process.getActiveStage().getName();
        var closeAttribute = formContext.getAttribute(this.Attributes.Opportunity.CloseNew);

        if(!excludedStages.includes(currentStage)){
            closeAttribute.setValue(null);
            //closeAttribute.fireOnChange();    //this is resulting in circular triggering
        }
    },
    calculateLoComPrice: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var locomPrice = formContext.getAttribute(optyObject.Attributes.Opportunity.LocomPrice);
    var fmv = formContext.getAttribute(optyObject.Attributes.Opportunity.FMV).getValue();
    var cost = formContext.getAttribute(optyObject.Attributes.Opportunity.Cost).getValue();
    if (fmv !== null && cost !== null) {
        if (fmv < cost) {
            locomPrice.setValue(fmv);
        } else {
            locomPrice.setValue(cost);
        }
    } else {
        locomPrice.setValue(null);
    }
    },
    setSBALendingStageSFOptionsBasedOnStatus: function(executionContext){
        // this is for SBA Lending LOB
        var formContext = executionContext.getFormContext();
        var statusAttribute = formContext.getAttribute(this.Attributes.Opportunity.Status);

        var statusLabel = statusAttribute.getText();
        var stageSFLOV = this.Attributes.LOV.StageSF;
        var sbaLendingOptions = [];

        if(statusLabel && statusLabel.toLowerCase().includes("closed")){
            sbaLendingOptions = [stageSFLOV.Funded,stageSFLOV.OtherDisposition, , stageSFLOV.Closed];
        }
        else{
            sbaLendingOptions = [stageSFLOV.Prospect,stageSFLOV.Application,stageSFLOV.Underwriting,stageSFLOV.InClosing,];
        }

        this.filterStageSFOptions(executionContext,sbaLendingOptions);
    },
    calculateGainonSalesAndNetExecutionOverPar: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var gainOnSales = formContext.getAttribute(optyObject.Attributes.Opportunity.GainOnSale);
    var netExecutionOverPar = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecutionOverpar);
    var collateralBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.CollateralBalance).getValue();
    var netExecution = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecution).getValue();
    if (collateralBalance !== null && netExecution !== null) {
        gainOnSales.setValue(collateralBalance * (netExecution - 1));
    } else {
        gainOnSales.setValue(null);
    }
    if (netExecution !== null) {
        if (netExecution > 1) {
            netExecutionOverPar.setValue(optyObject.Attributes.LOV.SetNetExecutionOverParValues.Over);
        } else if (netExecution === 1) {
            netExecutionOverPar.setValue(optyObject.Attributes.LOV.SetNetExecutionOverParValues.Par);
        } else {
            netExecutionOverPar.setValue(optyObject.Attributes.LOV.SetNetExecutionOverParValues.Under);
        }
    } else {
        netExecutionOverPar.setValue(null);
    }

    },
    calculatePeerIQFeesRate: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var peerIQFeesRate = formContext.getAttribute(optyObject.Attributes.Opportunity.PeerIQFeeRate);
    var peerIQSituation = formContext.getAttribute(optyObject.Attributes.Opportunity.PeerIQSituation).getValue();
    if (peerIQSituation !== null) {
        switch (peerIQSituation) {
            case optyObject.Attributes.LOV.PeerIQSituations.PeerIQIsUsedAndNoMajorHiccups:
                peerIQFeesRate.setValue(0.25);
                break;
            case optyObject.Attributes.LOV.PeerIQSituations.PeerIQIsUsedHoweverThereAreMajorHiccups:
                peerIQFeesRate.setValue(0.125);
                break;
            case optyObject.Attributes.LOV.PeerIQIsNotUsed:
                peerIQFeesRate.setValue(0);
                break;
            default:
                peerIQFeesRate.setValue(null);
        }
    } else {
        peerIQFeesRate.setValue(null);
    }
    },
    calculateEstimatedPIQFees: function (executionContext) {
        var formContext = executionContext.getFormContext();
        var optyObject = CRB.CRM.PJ.Opportunity;
        var estimatedPIQFees = formContext.getAttribute(optyObject.Attributes.Opportunity.EstimatedPIQFee);
        var peerIQFeesRate = formContext.getAttribute(optyObject.Attributes.Opportunity.PeerIQFeeRate).getValue();
        var collateralBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.CollateralBalance).getValue();
        if (peerIQFeesRate !== null && collateralBalance !== null) {
            estimatedPIQFees.setValue(collateralBalance * peerIQFeesRate);
        } else {
        estimatedPIQFees.setValue(null);
        }
    },
    setStageSFOptionsBasedOnClose: function(executionContext,stageSFOptions){
        var formContext = executionContext.getFormContext();
        var closeAttribute = formContext.getAttribute(this.Attributes.Opportunity.CloseNew);
        //var stageSFOptions = formContext.getControl(this.Attributes.Opportunity.stagesf).getOptions();
        if(!closeAttribute){
            return;
        }
        var closeValue = closeAttribute.getValue();

        var stagesfCloseOptions = [this.Attributes.LOV.StageSF.ClosedLost, this.Attributes.LOV.StageSF.ClosedDecline];
        if(!closeValue){
            stageSFOptions = stageSFOptions.filter((option)=>{
                return !stagesfCloseOptions.includes(option);
            });    
        }
        else{
            var allStageSFOptions = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getOptions();
    
            var optionsToAdd = allStageSFOptions.filter((option) => {
                return stagesfCloseOptions.includes(option.value);
            });

            optionsToAdd.forEach((option)=>{
                if(!stageSFOptions.includes(option)){
                    stageSFOptions.push(option.value);
                }
            });
        }

        this.filterStageSFOptions(executionContext,stageSFOptions);
    },
    calculateClosingWireToCRB: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var closingWireToCRB = formContext.getAttribute(optyObject.Attributes.Opportunity.ClosingWiretoCRB);
    var netProceeds = formContext.getAttribute(optyObject.Attributes.Opportunity.NetProceeds).getValue();
    var trueUps = formContext.getAttribute(optyObject.Attributes.Opportunity.TrueUPsNetted).getValue();
    var retentionFromSecuritizations = formContext.getAttribute(optyObject.Attributes.Opportunity.RetentionFromSecuritizations).getValue();
    if (netProceeds !== null && trueUps !== null && retentionFromSecuritizations !== null) {
        closingWireToCRB.setValue(netProceeds - trueUps - retentionFromSecuritizations);
    } else {
        closingWireToCRB.setValue(null);
    }
},
calculateNetExecutionexAccruedInterest: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var netExecutionexAccruedInterest = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecutionExAccruedinterest);
    var collatAndAccrued = formContext.getAttribute(optyObject.Attributes.Opportunity.CollatAndAccrued).getValue();
    var accruedInterest = formContext.getAttribute(optyObject.Attributes.Opportunity.AccruedInterest).getValue();
    var netProceeds = formContext.getAttribute(optyObject.Attributes.Opportunity.NetProceeds).getValue();
    var netExecution = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecution).getValue();
    // Ensure all necessary values are not null
    if (collatAndAccrued !== null && accruedInterest !== null) {
        if ((collatAndAccrued - accruedInterest) === 0) {
            netExecutionexAccruedInterest.setValue(netExecution);
        } else if (netProceeds !== null) {
            netExecutionexAccruedInterest.setValue((netProceeds - accruedInterest) / (collatAndAccrued - accruedInterest));
        } else {
            netExecutionexAccruedInterest.setValue(null);
        }
    } else {
        netExecutionexAccruedInterest.setValue(null);
    }
},
calculateWeightExAccruedInterest: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var weightExAccruedInterest = formContext.getAttribute(optyObject.Attributes.Opportunity.WeightedExAccruedInterest);
    var netExecutionexAccruedInterest = formContext.getAttribute(optyObject.Attributes.Opportunity.NetExecutionExAccruedinterest).getValue();
    var collateralBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.CollateralBalance).getValue();
    if (netExecutionexAccruedInterest !== null && collateralBalance !== null) {
        weightExAccruedInterest.setValue(netExecutionexAccruedInterest * collateralBalance);
    } else {
        weightExAccruedInterest.setValue(null);
    }
},
calculateTplus3AndTplus20: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var tplus3 = formContext.getAttribute(optyObject.Attributes.Opportunity.T3);
    var tplus20 = formContext.getAttribute(optyObject.Attributes.Opportunity.T20);
    var closeDate = formContext.getAttribute(optyObject.Attributes.Opportunity.CloseDate).getValue();
    if (closeDate !== null) {
        // Ensure closeDate is treated as a Date object without time
        closeDate = new Date(closeDate);
        closeDate.setHours(0, 0, 0, 0);
        // Define the reference date (1900,1,7)
        var referenceDate = new Date(1900, 0, 7); // January is 0 in JavaScript Date
        referenceDate.setHours(0, 0, 0, 0);
        // Calculate the difference in days
        var timeDifference = closeDate.getTime() - referenceDate.getTime();
        var dayDifference = Math.floor(timeDifference / (1000 * 3600 * 24));
        // Calculate MOD value
        var modValue = dayDifference % 7;
        // Define tplus3Date and tplus20Date once
        var tplus3Date = new Date(closeDate);
        var tplus20Date = new Date(closeDate);
        switch (modValue) {
            case 0:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3 - 1) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20 - 1) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 1:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 2:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3 + 1) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20 + 1) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 3:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3 + 2) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20 + 2) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 4:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3 + 3) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20 + 3) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 5:
                tplus3Date.setDate(tplus3Date.getDate() + 3 + Math.floor((3 + 4) / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() + 20 + Math.floor((20 + 4) / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            case 6:
                tplus3Date.setDate(tplus3Date.getDate() - (3 > 0 ? 1 : 0) + 3 + Math.ceil(3 / 5) * 2);
                tplus3.setValue(tplus3Date);
                tplus20Date.setDate(tplus20Date.getDate() - (20 > 0 ? 1 : 0) + 20 + Math.ceil(20 / 5) * 2);
                tplus20.setValue(tplus20Date);
                break;
            default:
                tplus3.setValue(null);
                tplus20.setValue(null);
                break;
        }
    }
},
calculateCECLImpact$: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var opportunityType = formContext.getAttribute(optyObject.Attributes.Opportunity.OpportunityType).getValue();
    if (opportunityType !== null && opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase() === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.CapitalMarkets) {
        var ceclImpact$ = formContext.getAttribute(optyObject.Attributes.Opportunity.CeclImpact$);
        if (ceclImpact$ && ceclImpact$.getValue() === null) {
            var hfsInPercent = formContext.getAttribute(optyObject.Attributes.Opportunity.HFS).getValue();
            var principalBalance = formContext.getAttribute(optyObject.Attributes.Opportunity.PrincipalBalance).getValue();
            var ceclImpactInPercent = formContext.getAttribute(optyObject.Attributes.Opportunity.CeclImpact).getValue();
            if (hfsInPercent !== null && principalBalance !== null && ceclImpactInPercent !== null) {
                ceclImpact$.setValue((1 - hfsInPercent) * principalBalance * ceclImpactInPercent);
            } else {
                ceclImpact$.setValue(null);
            }
        }
    }
},
calculateInitialDueDiligenceCompleted: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var initialDueDiligence = formContext.getAttribute(optyObject.Attributes.Opportunity.InitialDueDiligenceCompleted);
    var attributes = [optyObject.Attributes.Opportunity.CorporateDeck,
        optyObject.Attributes.Opportunity.CorporateFinancialModel,
        optyObject.Attributes.Opportunity.AuditedUnauditedFinancials,
        optyObject.Attributes.Opportunity.AssetTape,
        optyObject.Attributes.Opportunity.HistoricalAssetPerformanceSummary,
        optyObject.Attributes.Opportunity.CompanysProjectionsSummary,
        optyObject.Attributes.Opportunity.UnderwritingAndPricingGuidelines,
        optyObject.Attributes.Opportunity.ServicingGuidelines,
        optyObject.Attributes.Opportunity.SampleCustomerAgreement
    ];
    var values = attributes.map(attr => formContext.getAttribute(attr).getValue());
    if (values.every(value => value !== null)) {
        var sum = values.reduce((acc, value) => acc + (value === true ? 1 : 0), 0);
        initialDueDiligence.setValue(sum);
    } else {
        initialDueDiligence.setValue(null);
    }
},
calculateInitialDiligence: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var initialDueDiligence = formContext.getAttribute(optyObject.Attributes.Opportunity.InitialDiligence);
    var initialDueDiligenceCompleted = formContext.getAttribute(optyObject.Attributes.Opportunity.InitialDueDiligenceCompleted).getValue();
    if (initialDueDiligence !== null) {
        initialDueDiligence.setValue(initialDueDiligenceCompleted / 9);
    } else {
        initialDueDiligence.setValue(null);
    }
},
registerOnchangeEventsforSDL: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var attributes = [optyObject.Attributes.Opportunity.CorporateDeck,
        optyObject.Attributes.Opportunity.CorporateFinancialModel,
        optyObject.Attributes.Opportunity.AuditedUnauditedFinancials,
        optyObject.Attributes.Opportunity.AssetTape,
        optyObject.Attributes.Opportunity.HistoricalAssetPerformanceSummary,
        optyObject.Attributes.Opportunity.CompanysProjectionsSummary,
        optyObject.Attributes.Opportunity.UnderwritingAndPricingGuidelines,
        optyObject.Attributes.Opportunity.ServicingGuidelines,
        optyObject.Attributes.Opportunity.SampleCustomerAgreement
    ];
    attributes.forEach(attr => {
        formContext.getAttribute(attr).addOnChange(this.calculateInitialDueDiligenceCompleted);
        formContext.getAttribute(attr).addOnChange(this.calculateInitialDiligence);
    });
    formContext.getAttribute(optyObject.Attributes.Opportunity.InitialDueDiligenceCompleted).addOnChange(this.calculateInitialDiligence);
    const fieldsForWeightedAmount = [optyObject.Attributes.Opportunity.Amount, optyObject.Attributes.Opportunity.Probability];
    fieldsForWeightedAmount.forEach(field => {
    formContext.getAttribute(field).addOnChange(this.calculateWeightedAmount);
    });
    const fieldsForNetInterestMarginAndROE = [optyObject.Attributes.Opportunity.NetIneterestMarginPercent, optyObject.Attributes.Opportunity.AvgCapitalDeployed];
    fieldsForNetInterestMarginAndROE.forEach(field => {
    formContext.getAttribute(field).addOnChange(this.calculateNetInterestMarginAndROE);
    formContext.getAttribute(field).addOnChange(this.calculateProbabilityWeightedNIM);
    });
},
calculateWeightedAmount: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var weightedAmount = formContext.getAttribute(optyObject.Attributes.Opportunity.WeightedAmount);
    var amount = formContext.getAttribute(optyObject.Attributes.Opportunity.Amount).getValue();
    var probability = formContext.getAttribute(optyObject.Attributes.Opportunity.Probability).getValue();
    if (amount !== null && probability !== null) {
        weightedAmount.setValue(amount * (probability / 100));
    } else {
        weightedAmount.setValue(null);
    }
},
calculateNetInterestMarginAndROE: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var netInterestMargin = formContext.getAttribute(optyObject.Attributes.Opportunity.NetInterestMargin);
    var roe = formContext.getAttribute(optyObject.Attributes.Opportunity.ROE);
    var netInterestMarginInPercent = formContext.getAttribute(optyObject.Attributes.Opportunity.NetIneterestMarginPercent).getValue();
    var avgCapitalDeployed = formContext.getAttribute(optyObject.Attributes.Opportunity.AvgCapitalDeployed).getValue();
    if (netInterestMarginInPercent !== null) {
        roe.setValue(((netInterestMarginInPercent) * 10) * 0.73);
        if (avgCapitalDeployed !== null) {
            netInterestMargin.setValue(netInterestMarginInPercent * avgCapitalDeployed);
        }
    } else {
        netInterestMargin.setValue(null);
        roe.setValue(null);
    }
},
calculateProbabilityWeightedNIM: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var probabilityWeightedNIM = formContext.getAttribute(optyObject.Attributes.Opportunity.ProbabilityWeightedNIM);
    var netInterestMargin = formContext.getAttribute(optyObject.Attributes.Opportunity.NetInterestMargin).getValue();
    var probability = formContext.getAttribute(optyObject.Attributes.Opportunity.Probability).getValue();
    if (netInterestMargin !== null && probability !== null) {
        probabilityWeightedNIM.setValue(netInterestMargin * (probability / 100));
    } else {
        probabilityWeightedNIM.setValue(null);
    }
},
validateSubPlatformOnCapitalMarkets: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var fields = [optyObject.Attributes.Opportunity.PrimePercent, optyObject.Attributes.Opportunity.MaddenPercent, optyObject.Attributes.Opportunity.SubPlatformPercent3, optyObject.Attributes.Opportunity.SubPlatformPercent4, optyObject.Attributes.Opportunity.SubPlatformPercent5, optyObject.Attributes.Opportunity.SubPlatformPercent6];
    var fieldsNonSubPlatform = [optyObject.Attributes.Opportunity.PrimePercent, optyObject.Attributes.Opportunity.MaddenPercent, optyObject.Attributes.Opportunity.SubPlatformPercent3, optyObject.Attributes.Opportunity.SubPlatformPercent4, optyObject.Attributes.Opportunity.SubPlatformPercent5, optyObject.Attributes.Opportunity.SubPlatformPercent6];

    // Clear any existing notifications
    formContext.ui.clearFormNotification("total_exceeds_100");

    // Get values of each field and ensure they are between 0 and 100
    var values;

    var platform = formContext.getAttribute(optyObject.Attributes.Opportunity.Platform);
    if (platform && platform.getValue() !== null) {
        if (platform.getValue() == 12) { //Marlette: 12 optionsetValue
            values = fields.map(field => formContext.getAttribute(field).getValue() || 0);
        } else {
            values = fieldsNonSubPlatform.map(field => formContext.getAttribute(field).getValue() || 0);
        }
    } else {
        values = fieldsNonSubPlatform.map(field => formContext.getAttribute(field).getValue() || 0);
    }

    values = values.map(value => Math.max(0, Math.min(value, 100)));

    // Check if any field is set to 100; if so, set all other fields to 0
    if (values.some(value => value === 100)) {
        values = values.map(value => (value === 100 ? 100 : 0));
    } else {
        // Calculate the total and set the sixth field if needed
        var total = values.reduce((sum, value) => sum + value, 0);

        if (total < 100) {
            var filledFields = values.filter(value => value > 0).length;
            if (filledFields === 5) {
                var emptyIndex = values.findIndex(value => value === 0);
                values[emptyIndex] = 100 - total;
                total = 100;
            }
        }

        // Check if total exceeds 100 and prevent save if so
        if (total > 100) {
            formContext.ui.setFormNotification("Total Subplatform % cannot exceed 100.", "ERROR", "total_exceeds_100");
            if (executionContext.getEventArgs()) {
                executionContext.getEventArgs().preventDefault();
            }
        } else {
            formContext.ui.clearFormNotification("total_exceeds_100");
        }
    }

    // Set the field values back to the form
    fields.forEach((field, index) => {
        formContext.getAttribute(field).setValue(values[index]);
    });
},
enableAndDisableThirdPartySection: function(executionContext){
var formContext = executionContext.getFormContext();
var optyObject = CRB.CRM.PJ.Opportunity;
var applicationdateAttribute = formContext.getAttribute(optyObject.Attributes.Opportunity.ApplicationDate);
    if (applicationdateAttribute) {
        var applicationDate = applicationdateAttribute.getValue();
        var thirdPartySection = formContext.ui.tabs.get(optyObject.TabName.Details).sections.get(optyObject.Section.ThirdParty);
        var controls = thirdPartySection.controls.get();
        var disableControls = applicationDate ? false : true;
        for (var i in controls) {
            var control = controls[i];
            control.setDisabled(disableControls);
        }
    }
},
setCurrentDateforFirstStage: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var opportunityType = formContext.getAttribute(optyObject.Attributes.Opportunity.OpportunityType).getValue();
    var optyID = opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase();
    //    if (opportunityType !== null && opportunityType[0].name !== "Capital Markets") {
    if (optyID !== null && (optyID === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SDL || optyID === CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.DigitalBanking)) {
        var typeToDateAttributeMap = {
            "SDL": optyObject.Attributes.Opportunity.ProspectDate,
            "Digital Banking": optyObject.Attributes.Opportunity.AssessmentDate,
        };
        var dateAttributeName = typeToDateAttributeMap[opportunityType[0].name];
        var dateField = formContext.getAttribute(dateAttributeName).getValue();
        if (dateField === null) {
            var currentDate = new Date();
            var dateAttribute = formContext.getAttribute(dateAttributeName);
            dateAttribute.setValue(currentDate);
        }

    }
},
filterOptionSetsBasedonLOB: function (executionContext) {
    var formContext = executionContext.getFormContext();
    var optyObject = CRB.CRM.PJ.Opportunity;
    var LOVObject = optyObject.Attributes.LOV;
    var opportunityType = formContext.getAttribute(optyObject.Attributes.Opportunity.OpportunityType).getValue();
    var optyID = opportunityType[0].id.replace('{', '').replace('}', '').toLowerCase();
    const applicableOptions = {
        capitalMarket: {
            businessType: [LOVObject.BusinessType.InitialPurchase, LOVObject.BusinessType.RecurringBusiness],
            platform: [LOVObject.Platform.BorrowersFirst, LOVObject.Platform.Bread, LOVObject.Platform.CRE, LOVObject.Platform.FFAM, LOVObject.Platform.FreedomCplus, LOVObject.Platform.FreedomFplus,
                LOVObject.Platform.LendingClub, LOVObject.Platform.LoanDepot, LOVObject.Platform.Marlette, LOVObject.Platform.NCA, LOVObject.Platform.Rockloans, LOVObject.Platform.RockloansHI, LOVObject.Platform.SunlightHI,
                LOVObject.Platform.SunlightSolar, LOVObject.Platform.Upgarde, LOVObject.Platform.Upstart],
        },
        sdl: {
            priority: [LOVObject.Priority.Low, LOVObject.Priority.Medium, LOVObject.Priority.High],
            platform: [LOVObject.Platform.AboveAverage, LOVObject.Platform.Avg, LOVObject.Platform.BelowAvg],
        },
        sbaLending: {
            source: [LOVObject.Source.Broker, LOVObject.Source.Direct, LOVObject.Source.CDCorRBAC],
        },
        digitalBanking: {
            contractStatus: [LOVObject.ContractStatus.NDARequested, LOVObject.ContractStatus.NDAexecuted, LOVObject.ContractStatus.NDASubmittedtoLegal,
LOVObject.ContractStatus.ContractDetailsPendingClient, LOVObject.ContractStatus.ContractRequestedinLawVu, LOVObject.ContractStatus.ContractRoutedtoClient, LOVObject.ContractStatus.ContractSigned],
            platform: [LOVObject.Platform.AboveAverage, LOVObject.Platform.Avg, LOVObject.Platform.BelowAvg],
        }
    };

        switch (optyID) {
        case CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.CapitalMarkets:
            var businessTypeControl = formContext.getControl(optyObject.Attributes.Opportunity.BusinessType);
            if (!this.isNullorUndefinedorEmpty(businessTypeControl)) {
                this.updateOptions(businessTypeControl, applicableOptions.capitalMarket.businessType);
            }

            var platformControl = formContext.getControl(optyObject.Attributes.Opportunity.Platform);
            if (!this.isNullorUndefinedorEmpty(platformControl)) {
                this.updateOptions(platformControl, applicableOptions.capitalMarket.platform);
            }

            break;
        case CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SDL:
            var priorityControl = formContext.getControl(optyObject.Attributes.Opportunity.Priority);
            if (!this.isNullorUndefinedorEmpty(priorityControl)) {
                this.updateOptions(priorityControl, applicableOptions.sdl.priority);
            }

            var platformControlsdl = formContext.getControl(optyObject.Attributes.Opportunity.Platform);
            if (!this.isNullorUndefinedorEmpty(platformControlsdl)) {
                this.updateOptions(platformControlsdl, applicableOptions.sdl.platform);
            }
            break;
        case CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.DigitalBanking:
            var contractStatusControl = formContext.getControl(optyObject.Attributes.Opportunity.ContractStatus);
            if (!this.isNullorUndefinedorEmpty(contractStatusControl)) {
                this.updateOptions(contractStatusControl, applicableOptions.digitalBanking.contractStatus);
            }

            var platformControldb = formContext.getControl(optyObject.Attributes.Opportunity.Platform);
            if (!this.isNullorUndefinedorEmpty(platformControldb)) {
                this.updateOptions(platformControldb, applicableOptions.digitalBanking.platform);
            }
            break;
        case CRB.CRM.PJ.Opportunity.Attributes.LOV.lineOfBusiness.SBALending:
            var sourceControl = formContext.getControl(optyObject.Attributes.Opportunity.Source);
            if (!this.isNullorUndefinedorEmpty(sourceControl)) {
                this.updateOptions(sourceControl, applicableOptions.sbaLending.source);
            }
            break;
        default:
            break;
    }
},
isNullorUndefinedorEmpty: function (value) {
    if (value == undefined || value == null || value == "") {
        return true;
    } else {
        return false;
    }
},
updateOptions: function (control, applicableOptions) {
    const options = control.getOptions();
    options.forEach(option => {
        if (!(applicableOptions.includes(option.value))) {
            control.removeOption(option.value);
        }
    });
},
    populateDatesBasedOnCurrentStageDigitalBanking: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        var activeStageName = formContext.data.process.getActiveStage().getName();
        var currentForm = formContext.ui.formSelector.getCurrentItem().getLabel();
        var currentFormId = formContext.ui.formSelector.getCurrentItem().getId().toUpperCase();
        var stageSf = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.DigitalBanking && currentFormId === this.FormIds.DigitalBanking) {
            var currentDate = new Date();
            if (activeStageName === this.BPFStages.Assessment) {
                var prospectDate = formContext.getAttribute(this.Attributes.Opportunity.AssesmentDate);
                prospectDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.Negotiation) {
                var businessDevelopmentDate = formContext.getAttribute(this.Attributes.Opportunity.NegotiationDate);
                businessDevelopmentDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.Onboarding) {
                var investmentTeamDate = formContext.getAttribute(this.Attributes.Opportunity.OnboardingDate);
                investmentTeamDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.Completion) {
                var termSheetDate = formContext.getAttribute(this.Attributes.Opportunity.CompletionDate);
                termSheetDate.setValue(currentDate);
            }
        }
    },
    populateDatesBasedOnCurrentStageforSBALending: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        var activeStageName = formContext.data.process.getActiveStage().getName();
        var currentForm = formContext.ui.formSelector.getCurrentItem().getLabel();
        var currentFormId = formContext.ui.formSelector.getCurrentItem().getId().toUpperCase();
        var stagesf = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SBALending && currentFormId === this.FormIds.SBALending) {
            var currentDate = new Date();
            if (activeStageName === this.BPFStages.Prospect) {
                var prospectDate = formContext.getAttribute(this.Attributes.Opportunity.ProspectDate);
                prospectDate.setValue(currentDate);
            } 
//            else if (activeStageName === this.BPFStages.Application) {        //these 2 fields are missing
//                var applicationDate = formContext.getAttribute(this.Attributes.Opportunity.Application);
//                applicationDate.setValue(currentDate);
//            } 
//            else if (activeStageName === this.BPFStages.Underwriting) {
//                var underwritingDate = formContext.getAttribute(this.Attributes.Opportunity.UnderwritingDate);
//                underwritingDate.setValue(currentDate);
//            } 
            else if (activeStageName === this.BPFStages.InClosing) {
                var inClosingDate = formContext.getAttribute(this.Attributes.Opportunity.InClosingDate);
                inClosingDate.setValue(currentDate);
            }
        }
    },
    populateDatesBasedOnCurrentStageSDL: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        var activeStageName = formContext.data.process.getActiveStage().getName();
        var currentForm = formContext.ui.formSelector.getCurrentItem().getLabel();
        var currentFormId = formContext.ui.formSelector.getCurrentItem().getId().toUpperCase();
        var stageSF = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SDL && currentFormId === this.FormIds.SDL) {
            var currentDate = new Date();
            if (activeStageName === this.BPFStages.Prospect) {
                var prospectDate = formContext.getAttribute(this.Attributes.Opportunity.ProspectDate);
                prospectDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.BusinessDevelopment) {
                var businessDevelopmentDate = formContext.getAttribute(this.Attributes.Opportunity.BusinessDevelopmentDate);
                businessDevelopmentDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.InvestmentTeam) {
                var investmentTeamDate = formContext.getAttribute(this.Attributes.Opportunity.InvestmentTeamDate);
                investmentTeamDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.TermSheet) {
                var termSheetDate = formContext.getAttribute(this.Attributes.Opportunity.TermSheetDate);
                termSheetDate.setValue(currentDate);
            } else if (activeStageName === this.BPFStages.TermSheetExecuted) {
                var termSheetExecutedDate = formContext.getAttribute(this.Attributes.Opportunity.TermSheetExecutedDate);
                termSheetExecutedDate.setValue(currentDate);
            }
        }
    },
    updateLastStageDate: function(executionContext) {   //this isonly for SDL
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SDL) {
            var currentDate = new Date();
            var lastStageUpdate = formContext.getAttribute(this.Attributes.Opportunity.LastStageUpdateDate);
            lastStageUpdate.setValue(currentDate);
        }
    },
    updateLastStageDateDigitalBanking: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.DigitalBanking) {
            var currentDate = new Date();
            var lastStageUpdate = formContext.getAttribute(this.Attributes.Opportunity.LastStageUpdateDate);
            lastStageUpdate.setValue(currentDate);
        }
    },
    calculateAgesofStages: function(executionContext) { // this is only for SDL
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SDL) {
            var ages = {
                prospectAge: null,
                businessDevelopmentAge: null,
                investmentTeamAge: null,
                termSheetAge: null,
                termSheetExecutedAge: null,
                opportunityCloseAge: null,
                daysInCurrentStage: null
            };
            var lastStageUpdate = formContext.getAttribute(this.Attributes.Opportunity.LastStageUpdateDate).getValue();
            var prospectDate = formContext.getAttribute(this.Attributes.Opportunity.ProspectDate).getValue();
            var businessDevelopmentDate = formContext.getAttribute(this.Attributes.Opportunity.BusinessDevelopmentDate).getValue();
            var investmentTeamDate = formContext.getAttribute(this.Attributes.Opportunity.InvestmentTeamDate).getValue();
            var termSheetDate = formContext.getAttribute(this.Attributes.Opportunity.TermSheetDate).getValue();
            var termSheetExecutedDate = formContext.getAttribute(this.Attributes.Opportunity.TermSheetExecutedDate).getValue();
            var opportunityCloseDate = formContext.getAttribute(this.Attributes.Opportunity.OpportunityCloseDate).getValue();
            if (prospectDate !== null && businessDevelopmentDate !== null) {
                ages.prospectAge = this.calculateAge(prospectDate, businessDevelopmentDate);
                formContext.getAttribute(this.Attributes.Opportunity.ProspectAge).setValue(ages.prospectAge);
            }
            if (businessDevelopmentDate !== null && investmentTeamDate !== null) {
                ages.businessDevelopmentAge = this.calculateAge(businessDevelopmentDate, investmentTeamDate);
                formContext.getAttribute(this.Attributes.Opportunity.BusinessDevelopmentAge).setValue(ages.businessDevelopmentAge);
            }
            if (investmentTeamDate !== null && termSheetDate !== null) {
                ages.investmentTeamAge = this.calculateAge(investmentTeamDate, termSheetDate);
                formContext.getAttribute(this.Attributes.Opportunity.InvestmentTeamAge).setValue(ages.investmentTeamAge);
            }
            if (termSheetDate !== null && termSheetExecutedDate !== null) {
                ages.termSheetAge = this.calculateAge(termSheetDate, termSheetExecutedDate);
                formContext.getAttribute(this.Attributes.Opportunity.TermSheetAge).setValue(ages.termSheetAge);
            }
            var activeStageName = formContext.data.process.getActiveStage().getName();
            //var statusCode = formContext.getAttribute("statuscode").getText();
            var stageSf = formContext.getAttribute(this.Attributes.Opportunity.stagesf).getValue();
            if ((activeStageName === this.BPFStages.ClosedWon || activeStageName === this.BPFStages.ClosedLost) || activeStageName === this.BPFStages.ClosedDecline) { //statusCode === "Closed" && 
                if (termSheetExecutedDate !== null && lastStageUpdate !== null) {
                    ages.termSheetExecutedAge = this.calculateAge(termSheetExecutedDate, lastStageUpdate);
                    formContext.getAttribute(this.Attributes.Opportunity.TermSheetExecutedAge).setValue(ages.termSheetExecutedAge);
                }
            }
            if (lastStageUpdate !== null) {
                ages.daysInCurrentStage = this.calculateAge(lastStageUpdate, new Date());
                formContext.getAttribute(this.Attributes.Opportunity.DaysInCurrentStage).setValue(ages.daysInCurrentStage);
            }
        }
    },
    calculateAgesofStagesDigitalBanking: function(executionContext) {
        //debugger;
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        //var currentForm = 
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SDL) {
            var ages = {
                AssessmentAge: null,
                negotiationage: null,
                onboardingage: null,
                termSheetAge: null,
                completionage: null,
                daysInCurrentStage: null
            };
            // var lastStageUpdate = formContext.getAttribute("crb_last_stage_update").getValue();
            var AssessmentDate = formContext.getAttribute(this.Attributes.Opportunity.AssesmentDate).getValue();
            var NegotiationDate = formContext.getAttribute(this.Attributes.Opportunity.NegotiationDate).getValue();
            var OnboardingDate = formContext.getAttribute(this.Attributes.Opportunity.OnboardingDate).getValue();
            var CompletionDate = formContext.getAttribute(this.Attributes.Opportunity.CompletionDate).getValue();
            var opportunityCloseDate = formContext.getAttribute(this.Attributes.Opportunity.OpportunityCloseDate).getValue();
            var lastStageUpdate = formContext.getAttribute(this.Attributes.Opportunity.LastStageUpdateDate).getValue();
            if (AssessmentDate !== null && NegotiationDate !== null) {
                ages.AssessmentAge = this.calculateAge(AssessmentDate, NegotiationDate);
                formContext.getAttribute(this.Attributes.Opportunity.AssessmentAge).setValue(ages.AssessmentAge);
            }
            if (NegotiationDate !== null && OnboardingDate !== null) {
                ages.negotiationage = this.calculateAge(NegotiationDate, OnboardingDate);
                formContext.getAttribute(this.Attributes.Opportunity.NegatiationAge).setValue(ages.negotiationage);
            }
            if (OnboardingDate !== null && CompletionDate !== null) {
                ages.onboardingage = this.calculateAge(OnboardingDate, CompletionDate);
                formContext.getAttribute(this.Attributes.Opportunity.OnboardingAge).setValue(ages.onboardingage);
            }
            var activeStageName = formContext.data.process.getActiveStage().getName();
            //var statusCode = formContext.getAttribute("statuscode").getText();
            if ((activeStageName === this.BPFStages.ClosedWon || activeStageName ===this.BPFStages.ClosedLost)) {  //statusCode === "Closed" && 
                if (CompletionDate !== null && lastStageUpdate !== null) {
                    ages.completionage = this.calculateAge(CompletionDate, lastStageUpdate);
                    formContext.getAttribute(this.Attributes.Opportunity.CompletionAge).setValue(ages.completionage);
                }
            }
            if (lastStageUpdate !== null) {
                ages.daysInCurrentStage = this.calculateAge(lastStageUpdate, new Date());
                formContext.getAttribute(this.Attributes.Opportunity.CurrentStageAge).setValue(ages.daysInCurrentStage);
            }
        }
    },
    calculateAge: function(date, nextStageDate) {
        var diff = nextStageDate - date;
        var age = Math.floor(diff / 86400000);
        return age;
    },
    updateLastActivityModifiedSBALending: function(executionContext) {
        var formContext = executionContext.getFormContext();
        var opportunityType = formContext.getAttribute(this.Attributes.Opportunity.OpportunityType).getValue();
        if (opportunityType !== null && opportunityType[0].id.replace("{","").replace("}","").toLowerCase() === this.Attributes.LOV.lineOfBusiness.SBALending) {
            var currentDate = new Date();
            var lastActivityModified = formContext.getAttribute(this.Attributes.Opportunity.LastActivityModifiedDate);
            lastActivityModified.setValue(currentDate);
        }
    },
    setStatusBasedOnBPFStage: function(executionContext){
        var formContext = executionContext.getFormContext();
        var process = formContext.data.process.getActiveProcess();
        if(!process){
            return;
        }
        var stage = formContext.data.process.getActiveStage();
        var status = formContext.getAttribute(this.Attributes.Opportunity.Statuss);
        if(!stage || !status){
            return;
        }
        var activeStages = [this.BPFStages.Prospect, this.BPFStages.Application, this.BPFStages.Underwriting, this.BPFStages.InClosing]
        var currentStage = formContext.data.process.getActiveStage().getName();
        
        if(activeStages.includes(currentStage)){
            status.setValue(this.Attributes.LOV.StatusTabStatus.Active);
        }
        else{
            status.setValue(this.Attributes.LOV.StatusTabStatus.Inactive);
        }
    },
    setOpenCloseStatusBasedOnBPFStage: function(executionContext){
        var formContext = executionContext.getFormContext();
        var process = formContext.data.process.getActiveProcess();
        if(!process){
            return;
        }
        var stage = formContext.data.process.getActiveStage();
        var status = formContext.getAttribute(this.Attributes.Opportunity.Status);
        if(!stage || !status){
            return;
        }
        var closeStages = [this.BPFStages.Funded, this.BPFStages.OtherDisposition];
        var currentStage = formContext.data.process.getActiveStage().getName();
        if(closeStages.includes(currentStage)){
            status.setValue(this.Attributes.LOV.Status.ClosedWon);
        }
        else{
            status.setValue(this.Attributes.LOV.Status.InProgress);
        }
        status.fireOnChange();
    },
    setClosedInActionTaken: function(executionContext){
        var formContext = executionContext.getFormContext();
        var stagesf = formContext.getAttribute(this.Attributes.Opportunity.stagesf);
        var actionTaken = formContext.getAttribute(this.Attributes.Opportunity.ActionTaken);
        var actionTakenDate = formContext.getAttribute(this.Attributes.Opportunity.ActionTakenDate);
        if(!stagesf || !actionTaken || !actionTakenDate){
            return;
        }
        var stagesfValue = stagesf.getValue();
        if(stagesfValue === this.Attributes.LOV.StageSF.Closed){
            var actionTakenValue = actionTaken.getValue();
            if(actionTakenValue !== this.Attributes.LOV.ActionTaken.Closed){
                actionTaken.setValue(this.Attributes.LOV.ActionTaken.Closed);
            }
            actionTaken.fireOnChange()
        }
    },
}
